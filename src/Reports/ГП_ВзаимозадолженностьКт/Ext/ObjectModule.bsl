// Гарант+ Килипенко 31.01.2025 [F00234022] Отчет Взаимозадолженность (для Вялых) ++
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    
    ИнициализироватьПараметры();
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 31.01.2025 [F00234022] Отчет Взаимозадолженность (для Вялых) --

// Гарант+ Килипенко 31.01.2025 [F00234022] Отчет Взаимозадолженность (для Вялых) ++
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСчетаИсключения()
    СчетаИсключения = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();
    ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
        СчетаИсключения, ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам());
    СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
    СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);

    РезультатФункции = Новый СписокЗначений;
    РезультатФункции.ЗагрузитьЗначения(СчетаИсключения);

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСчетаНДСПоАренднымОбязательствам()
    РезультатФункции = Новый СписокЗначений;

    МассивСчетовНДСАрнелы = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();

    РезультатФункции.ЗагрузитьЗначения(МассивСчетовНДСАрнелы);
    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСчетаУчетаВзаиморасчетов()
    РезультатФункции = Новый СписокЗначений;

    ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);

    Для Каждого СтрокаСчета Из ТаблицаСчетов Цикл
        РезультатФункции.Добавить(СтрокаСчета.СчетРасчетов);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьОсновнойНаборДанных()
    Возврат ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
КонецФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();

    // Заполняем параметр АналитикаРасчетов
    АналитикаРасчетов = Новый СписокЗначений;
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "АналитикаРасчетов", АналитикаРасчетов);

    // Заполняем параметр СчетаНДСПоАренде
    СчетаНДСПоАренде = ПолучитьСчетаНДСПоАренднымОбязательствам();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "СчетаНДСПоАренде", СчетаНДСПоАренде);

    // Заполняем параметр ФильтрСписокСчетов
    ФильтрСписокСчетов = ПолучитьСчетаУчетаВзаиморасчетов();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);
        
    // Заполняем параметр СтавкаНДС
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "СтавкаНДС", Перечисления.СтавкиНДС.НДС20);

    ПараметрФильтрСписокСчетов =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов");
    Если ПараметрФильтрСписокСчетов <> Неопределено
        И (ПараметрФильтрСписокСчетов.Значение = Неопределено
            ИЛИ (ТипЗнч(ПараметрФильтрСписокСчетов.Значение) = Тип("СписокЗначений") И ПараметрФильтрСписокСчетов.Значение.Количество() = 0)) Тогда
        БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);
    КонецЕсли;
КонецПроцедуры

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("КонецПериода", Дата(1, 1, 1));

    ПараметрПериодОтчета =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Период");

    РезультатФункции.КонецПериода = ПараметрПериодОтчета.Значение;
    РезультатФункции.КонецПериода = ?(ТипЗнч(РезультатФункции.КонецПериода) = Тип("Дата"),
        РезультатФункции.КонецПериода, РезультатФункции.КонецПериода.Дата);
    РезультатФункции.КонецПериода = Новый Граница(КонецДня(РезультатФункции.КонецПериода), ВидГраницы.Включая);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "КонецПериода", РезультатФункции.КонецПериода);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 31.01.2025 [F00234022] Отчет Взаимозадолженность (для Вялых) --
