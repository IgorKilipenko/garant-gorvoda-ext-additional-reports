// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС ++
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    
    ИнициализироватьПараметры();
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    
    Если ДокументРезультат.ФиксацияСверху = 0 Тогда
        ОбластьДляФиксации = ДокументРезультат.НайтиТекст("Основное средство", , , Ложь);
        Если ОбластьДляФиксации <> Неопределено Тогда
            ДокументРезультат.ФиксацияСверху = ОбластьДляФиксации.Низ;;
        КонецЕсли;
    КонецЕсли;
    
    СтрокВШапке = ДокументРезультат.ФиксацияСверху;
    КоличествоКолонок = Мин(ДокументРезультат.ШиринаТаблицы, 13);
    
    ОбластьШапки = ДокументРезультат.Область(СтрокВШапке, , СтрокВШапке);
    ОбластьПриемник = ДокументРезультат.Область(СтрокВШапке + 1, , СтрокВШапке + 1);
    ДокументРезультат.ВставитьОбласть(ОбластьШапки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоГоризонтали, Ложь);
    
    Для Ном = 1 по КоличествоКолонок Цикл
        ТекОбласть = ДокументРезультат.Область(СтрокВШапке + 1, Ном);
        ЗаполнитьЗначенияСвойств(ТекОбласть, ДокументРезультат.Область(СтрокВШапке, Ном));
        ТекОбласть.Текст = "" + Ном;
        ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
    КонецЦикла;
    
    ДокументРезультат.ФиксацияСверху = ДокументРезультат.ФиксацияСверху + 1;
    Если ДокументРезультат.ФиксацияСверху > 15 Тогда
        ДокументРезультат.ФиксацияСверху = 0;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС --

// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС ++
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОсновнойНаборДанных()
    Возврат ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
КонецФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();
    
    // Сбор данных:
    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");
            
    ПараметрНачалоПериода =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "НачалоПериода");
    
    ПараметрОрганизация =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Организация");
    Если ПустаяСтрока(Строка(ПараметрОрганизация.Значение)) Тогда
        ПараметрОрганизация.Значение = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
        БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, 
            "Организация", 
            ПараметрОрганизация.Значение);
    КонецЕсли;

    ПараметрПодразделенияОС =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПодразделенияОС");

    ПараметрМОЛ =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "МОЛ");
            
    ПараметрДатаАкта =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ДатаАкта");

    // Установка значений параметров:
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "ЗадерживатьПериодДействия", 
        Перечисления.АлгоритмыПериодаАмортизации.ЗадерживатьАмортизацию(
            ПараметрНачалоПериода.Значение, ПараметрОрганизация.Значение));
    
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "Счет01", 
        ПланыСчетов.Хозрасчетный.ОсновныеСредства); // Счет 01
        
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "Счет02", 
        ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств); // Счет 02

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "Счет02_01", 
        ПланыСчетов.Хозрасчетный.АмортизацияОС_01); // Счет 02.01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "Счет84_01", 
        ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению); // Счет 84.01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "ФИОРуководителя", 
        ГП_РаботаСОтчетами.ПолучитьФИОПредставителя(
            "Руководитель", ПараметрОрганизация.Значение, ПараметрПериод.Значение));

    // Подразделение представление
    ПодразделениеПредставление = "                  ";
    Если ПараметрПодразделенияОС.Использование = Истина Тогда
        ПодразделениеПредставление = ПараметрПодразделенияОС.Значение;
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "ПодразделениеПредставление", 
        ПодразделениеПредставление);
        

    // МОЛ представление
    МОЛПредставление = "                  ";
    Если ПараметрМОЛ.Использование = Истина Тогда
        МОЛПредставление = ПараметрМОЛ.Значение;
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "МОЛПредставление", 
        МОЛПредставление);

    // Дата акта представление
    ДатаАктаПредставление = """___"" ___________ ______ г.";
    Если ПараметрДатаАкта.Использование = Истина Тогда
        ДатаАктаПредставление = Формат(НачалоДня(ПараметрДатаАкта.Значение), "ДФ='dd MMMM yyyy'") + "г.";
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "ДатаАктаПредставление", 
        ДатаАктаПредставление);
КонецПроцедуры

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), Дата(1, 1, 1));

    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");

    РезультатФункции.НачалоПериода = НачалоДня(ПараметрПериод.Значение);
    РезультатФункции.КонецПериода = КонецДня(ПараметрПериод.Значение);
    
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Период", НачалоДня(ПараметрПериод.Значение));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "НачалоПериода", РезультатФункции.НачалоПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "НачалоПериодаГраница", 
        Новый Граница(РезультатФункции.НачалоПериода, ВидГраницы.Включая));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "КонецПериода", РезультатФункции.КонецПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, 
        "КонецПериодаГраница", 
        Новый Граница(РезультатФункции.КонецПериода, ВидГраницы.Включая));

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС --
