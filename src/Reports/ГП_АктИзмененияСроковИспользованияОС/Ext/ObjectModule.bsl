// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС ++
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    ИнициализироватьПараметры();

    ЭтоРасшифровкаОтчета = ЭтоРасшифровкаОтчета();
    ЭтоВариантОтчетаДляПечати = ?(ЭтоРасшифровкаОтчета, Ложь, ЭтоВариантОтчетаДляПечати());

    ГруппировкаШапка = ПолучитьГруппировкуШапка();
    ГруппировкаШапка.Использование = ЭтоВариантОтчетаДляПечати;
    ГруппировкаПодвал = ПолучитьГруппировкуПодвал();
    ГруппировкаПодвал.Использование = ЭтоВариантОтчетаДляПечати;

    // Настройка параметров вывода:
    НастроитьПараметрыВывода(ЭтоВариантОтчетаДляПечати);

    // Временно выключаем использование служебных параметров на время формирования отчета
    ИспользуемыеПользователемСлужебныеПараметры = ПолучитьИспользуемыеПользователемСлужебныеПараметры();
    Для Каждого ИспользуемыйПараметр Из ИспользуемыеПользователемСлужебныеПараметры Цикл
        ИспользуемыйПараметр.Использование = Ложь;
    КонецЦикла;

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;

    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    // Включаем служебные параметры обратно
    Для Каждого ИспользуемыйПараметр Из ИспользуемыеПользователемСлужебныеПараметры Цикл
        ИспользуемыйПараметр.Использование = Истина;
    КонецЦикла;

    Если ЭтоРасшифровкаОтчета = Ложь Тогда
        ОформитьЗаголовокТаблицы(ДокументРезультат);

        МаксимумКолонокАкта = Неопределено;
        НомерСтрокиФиксацииСверху = ПронумероватьКолонкиОтчета(ДокументРезультат, МаксимумКолонокАкта);

        МаксимумСтрокФиксации = 15;
        ДокументРезультат.ФиксацияСверху = НомерСтрокиФиксацииСверху;
        Если ДокументРезультат.ФиксацияСверху > МаксимумСтрокФиксации Тогда
            ДокументРезультат.ФиксацияСверху = 0;
        КонецЕсли;

        Если ЭтоВариантОтчетаДляПечати = Истина Тогда
            // Заполнение подвала
            ГруппировкаПодвал = ПолучитьГруппировкуПодвал();
            Если ЭтоВариантОтчетаДляПечати() = Истина Тогда
                ЗаполнитьПоляЧленовКомиссии(ДокументРезультат,
                    ДокументРезультат.Область(НомерСтрокиФиксацииСверху, , НомерСтрокиФиксацииСверху));
            КонецЕсли;

            // Установка повторения заголовка таблицы на каждой странице печати
            ОбластьСтрокЗаголовкаТаблицы = ДокументРезультат.Область(
                    Макс(НомерСтрокиФиксацииСверху - 2, 0), , НомерСтрокиФиксацииСверху);
            ДокументРезультат.ПовторятьПриПечатиСтроки = ОбластьСтрокЗаголовкаТаблицы;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС --

// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС ++
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОсновнойНаборДанных()
    Возврат ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
КонецФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();

    // Сбор данных:
    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");

    ПараметрНачалоПериода =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "НачалоПериода");

    ПараметрОрганизация =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Организация");
    Если ПустаяСтрока(Строка(ПараметрОрганизация.Значение)) Тогда
        ПараметрОрганизация.Значение = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
        БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек,
            "Организация",
            ПараметрОрганизация.Значение);
    КонецЕсли;

    ПараметрПодразделенияОС =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПодразделенияОС");

    ПараметрМОЛ =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "МОЛ");

    ПараметрДатаАкта =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ДатаАкта");

    // Установка значений параметров:
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ЗадерживатьПериодДействия",
        Перечисления.АлгоритмыПериодаАмортизации.ЗадерживатьАмортизацию(
            ПараметрНачалоПериода.Значение, ПараметрОрганизация.Значение));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет01",
        ПланыСчетов.Хозрасчетный.ОсновныеСредства); // Счет 01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет02",
        ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств); // Счет 02

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет02_01",
        ПланыСчетов.Хозрасчетный.АмортизацияОС_01); // Счет 02.01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет84_01",
        ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению); // Счет 84.01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ФИОРуководителя",
        ГП_РаботаСОтчетами.ПолучитьФИОПредставителя(
            "Руководитель", ПараметрОрганизация.Значение, ПараметрПериод.Значение));

    // Подразделение представление
    ПодразделениеПредставление = "                  ";
    Если ПараметрПодразделенияОС.Использование = Истина Тогда
        ПодразделениеПредставление = ПараметрПодразделенияОС.Значение;
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ПодразделениеПредставление",
        ПодразделениеПредставление);

    // МОЛ представление
    МОЛПредставление = "                  ";
    Если ПараметрМОЛ.Использование = Истина Тогда
        МОЛПредставление = ПараметрМОЛ.Значение;
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "МОЛПредставление",
        МОЛПредставление);

    // Дата акта представление
    ДатаАктаПредставление = """___"" ___________ ______ г.";
    Если ПараметрДатаАкта.Использование = Истина Тогда
        ДатаАктаПредставление = Формат(НачалоДня(ПараметрДатаАкта.Значение), "ДФ='dd MMMM yyyy'") + "г.";
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ДатаАктаПредставление",
        ДатаАктаПредставление);
КонецПроцедуры

// Возвращаемое значение:
//  - Массив
Функция ПолучитьИспользуемыеПользователемСлужебныеПараметры()
    РезультатФункции = Новый Массив;

    СписокСлужебныхПараметровДоступныхПользователю = ПолучитьСписокСлужебныхПараметровДоступныхПользователю();
    Для Каждого ЭлементКЗ Из СписокСлужебныхПараметровДоступныхПользователю Цикл
        Если ЭлементКЗ.Значение.Использование = Истина Тогда
            РезультатФункции.Добавить(ЭлементКЗ.Значение);
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

Процедура НастроитьПараметрыВывода(Знач ДляПечати)
    // Макет оформления
    ЭлементПараметраВывода = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(
            Новый ПараметрКомпоновкиДанных("МакетОформления"));
    ЭлементПараметраВывода.Использование = Истина;
    ЭлементПараметраВывода.Значение = ?(ДляПечати = Истина, "ОформлениеОтчетовЧерноБелый", "ОформлениеОтчетовЗеленый");

    // Вывод параметры данных
    ЭлементПараметраВывода = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(
            Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
    ЭлементПараметраВывода.Использование = Истина;
    Если ДляПечати = Истина Тогда
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
    Иначе
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
    КонецЕсли;

    // Вывод отбора
    ЭлементПараметраВывода = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(
            Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"));
    ЭлементПараметраВывода.Использование = Истина;
    Если ДляПечати = Истина Тогда
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
    Иначе
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
    КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//  - Соответствие
Функция ПолучитьСписокСлужебныхПараметровДоступныхПользователю()
    СписокСлужебныхПараметровДоступныхПользователю = Новый Соответствие;

    ПараметрПредседательКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПредседательКомиссии");
    СписокСлужебныхПараметровДоступныхПользователю.Вставить(
        ПараметрПредседательКомиссии.Параметр, ПараметрПредседательКомиссии);

    ПараметрЧленыКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ЧленыКомиссии");
    СписокСлужебныхПараметровДоступныхПользователю.Вставить(
        ПараметрЧленыКомиссии.Параметр, ПараметрЧленыКомиссии);

    ПараметрДатаАкта =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ДатаАкта");
    СписокСлужебныхПараметровДоступныхПользователю.Вставить(
        ПараметрДатаАкта.Параметр, ПараметрДатаАкта);

    ПараметрНомерАкта =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "НомерАкта");
    СписокСлужебныхПараметровДоступныхПользователю.Вставить(
        ПараметрНомерАкта.Параметр, ПараметрНомерАкта);

    Возврат СписокСлужебныхПараметровДоступныхПользователю;
КонецФункции

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), Дата(1, 1, 1));

    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");

    РезультатФункции.НачалоПериода = НачалоДня(ПараметрПериод.Значение);
    РезультатФункции.КонецПериода = КонецДня(ПараметрПериод.Значение);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Период", НачалоДня(ПараметрПериод.Значение));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "НачалоПериода", РезультатФункции.НачалоПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "НачалоПериодаГраница",
        Новый Граница(РезультатФункции.НачалоПериода, ВидГраницы.Включая));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "КонецПериода", РезультатФункции.КонецПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "КонецПериодаГраница",
        Новый Граница(РезультатФункции.КонецПериода, ВидГраницы.Включая));

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДокументРезультат - ТабличныйДокумент
//  МаксимумКолонокАкта - Число, Неопределено
// Возвращаемое значение:
//  - Число - Номер строки добавленной области
Функция ПронумероватьКолонкиОтчета(ДокументРезультат, Знач МаксимумКолонокАкта = Неопределено)
    МаксимумКолонокАкта = ?(МаксимумКолонокАкта = Неопределено, ДокументРезультат.ШиринаТаблицы, МаксимумКолонокАкта);

    НомерСтрокиФиксации = ДокументРезультат.ФиксацияСверху;

    Если НомерСтрокиФиксации <= 0 Тогда
        Если ДокументРезультат.ФиксацияСверху = 0 Тогда
            ОбластьДляФиксации = ПолучитьИсходнуюОбластьЗаголовкаТаблицы(ДокументРезультат);
            Если ОбластьДляФиксации <> Неопределено Тогда
                ДокументРезультат.ФиксацияСверху = ОбластьДляФиксации.Низ;
            Иначе
                НомерСтрокиФиксации = 0;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

    СтрокВШапке = НомерСтрокиФиксации;
    КоличествоКолонок = Мин(ДокументРезультат.ШиринаТаблицы, МаксимумКолонокАкта);

    ОбластьШапки = ДокументРезультат.Область(СтрокВШапке, , СтрокВШапке);
    ОбластьПриемник = ДокументРезультат.Область(СтрокВШапке + 1, , СтрокВШапке + 1);
    ДокументРезультат.ВставитьОбласть(ОбластьШапки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоГоризонтали, Ложь);

    Для НомерТекущейКолонки = 1 По КоличествоКолонок Цикл
        ТекОбласть = ДокументРезультат.Область(СтрокВШапке + 1, НомерТекущейКолонки);

        ТекОбластьИсточникЗаполнения = ДокументРезультат.Область(СтрокВШапке, НомерТекущейКолонки);
        Если ПустаяСтрока(ТекОбластьИсточникЗаполнения.Текст) Тогда
            Продолжить;
        КонецЕсли;

        ЗаполнитьЗначенияСвойств(ТекОбласть, ТекОбластьИсточникЗаполнения);
        ТекОбласть.Текст = Строка(НомерТекущейКолонки);
        ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
    КонецЦикла;

    Возврат НомерСтрокиФиксации + 1;
КонецФункции

// Параметры:
//  ДокументРезультат - ТабличныйДокумент
// Возвращаемое значение:
//  - ОбластьЯчеекТабличногоДокумента, Неопределено
Функция ПолучитьИсходнуюОбластьЗаголовкаТаблицы(Знач ДокументРезультат)
    ОбластьГруппаОС = ДокументРезультат.НайтиТекст(ПолучитьТекстЗаменыЗаголовкаГруппаОС(), , , Истина, Истина, Истина);
    Если ОбластьГруппаОС = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    ОбластьОсновноеСредство = ДокументРезультат.НайтиТекст(ПолучитьТекстЗаменыЗаголовкаОС(), ОбластьГруппаОС, , Истина, Истина, Истина);
    Если ОбластьОсновноеСредство = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    РезультатФункции = ДокументРезультат.Область(ОбластьГруппаОС.Верх, , ОбластьОсновноеСредство.Низ);
    Возврат РезультатФункции;
КонецФункции

Функция ОформитьЗаголовокТаблицы(ДокументРезультат)
    РезультатФункции = Неопределено;

    ОбластьЗаголовкаТаблицы = ПолучитьИсходнуюОбластьЗаголовкаТаблицы(ДокументРезультат);
    Если ОбластьЗаголовкаТаблицы = Неопределено Тогда
        ОбластьГруппаОС = ДокументРезультат.НайтиТекст(ПолучитьТекстЗаменыЗаголовкаГруппаОС(), , , Истина, Истина, Истина);
        Если ОбластьГруппаОС <> Неопределено Тогда
            ОбластьГруппаОС.Текст = "";
        КонецЕсли;

        Возврат РезультатФункции;
    КонецЕсли;

    ОбластьГруппаОС = ДокументРезультат.НайтиТекст(
            ПолучитьТекстЗаменыЗаголовкаГруппаОС(), , ОбластьЗаголовкаТаблицы, Истина, Истина, Истина);
    Если ОбластьГруппаОС = Неопределено Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    ОбластьГруппаОС.Текст = "";
    ПравоОбластиГруппаОС = ОбластьГруппаОС.Право;
    Для НомерТекущейКолонки = ОбластьГруппаОС.Лево По ?(ОбластьЗаголовкаТаблицы.Право = 0, ДокументРезультат.ШиринаТаблицы, ОбластьЗаголовкаТаблицы.Право) Цикл
        СмежнаяОбласть = ДокументРезультат.Область(
                ОбластьГруппаОС.Верх, НомерТекущейКолонки, ОбластьГруппаОС.Низ, НомерТекущейКолонки);
        Если НЕ ПустаяСтрока(СмежнаяОбласть.Текст) Тогда
            Прервать;
        КонецЕсли;

        ПравоОбластиГруппаОС = НомерТекущейКолонки;
    КонецЦикла;
    ОбластьГруппаОС = ДокументРезультат.Область(ОбластьГруппаОС.Верх, ОбластьГруппаОС.Лево, ОбластьГруппаОС.Низ, ПравоОбластиГруппаОС);

    ОбластьОсновноеСредство = ДокументРезультат.НайтиТекст(
            ПолучитьТекстЗаменыЗаголовкаОС(), , ОбластьЗаголовкаТаблицы, Истина, Истина, Истина);
    Если ОбластьОсновноеСредство = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если ОбластьГруппаОС.Низ - ОбластьГруппаОС.Верх > 1
        ИЛИ ОбластьГруппаОС.Право - ОбластьГруппаОС.Лево < 1
        ИЛИ ОбластьОсновноеСредство.Верх - ОбластьГруппаОС.Низ > 1 Тогда

        Возврат Неопределено; // Несоответствие структуры заголовка
    КонецЕсли;

    ОбластьГруппаОС.Разъединить();

    Для НомерТекущейКолонки = ОбластьГруппаОС.Лево По ОбластьГруппаОС.Право Цикл
        ОбластьОбъединения = ДокументРезультат.Область(
                ОбластьГруппаОС.Верх, НомерТекущейКолонки, ОбластьОсновноеСредство.Низ, НомерТекущейКолонки);

        // Копируем значения текста ячейки
        ОбластьЗаполненияПриемник = ДокументРезультат.Область(
                ОбластьОбъединения.Верх, НомерТекущейКолонки, ОбластьОбъединения.Верх, НомерТекущейКолонки);
        ОбластьЗаполненияИсточник = ДокументРезультат.Область(
                ОбластьОсновноеСредство.Верх, НомерТекущейКолонки, ОбластьОсновноеСредство.Низ, НомерТекущейКолонки);
        ЗаполнитьЗначенияСвойств(
            ОбластьЗаполненияПриемник,
            ОбластьЗаполненияИсточник, "Текст, ВертикальноеПоложение, ГоризонтальноеПоложение, Шрифт");

        ОбластьОбъединения.Объединить();
    КонецЦикла;

    Возврат ОбластьЗаголовкаТаблицы;
КонецФункции

// Параметры:
//  ДокументРезультат - ТабличныйДокумент
//  ОбластьНачалаПоиска - ОбластьЯчеекТабличногоДокумента, Неопределено
// Возвращаемое значение:
//  - Число
Функция ЗаполнитьПоляЧленовКомиссии(ДокументРезультат, Знач ОбластьНачалаПоиска = Неопределено)
    ПараметрОрганизация =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Организация");

    // Заполнение поля председатель комиссии:
    ПараметрПредседательКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПредседательКомиссии");

    ОбластьЧленыКомиссии = ПолучитьОбластьПредседателяКомиссии(ДокументРезультат, ОбластьНачалаПоиска);
    НомерТекущейСтроки = ?(ОбластьЧленыКомиссии = Неопределено, 0, ОбластьЧленыКомиссии.Низ);

    Если ОбластьЧленыКомиссии = Неопределено Тогда
        Возврат НомерТекущейСтроки; // Область комиссии не не найдена
    КонецЕсли;

    ДатаАктуальностиСведений = ПолучитьДатуПериодаОтчета();

    // Заполнение должности председателя
    ОбластьЧленыКомиссии.Текст = ?(ПараметрПредседательКомиссии.Использование,
            ПолучитьФИОФизическогоЛица(ПараметрПредседательКомиссии.Значение, ДатаАктуальностиСведений), "");

    // Заполнение должности председателя
    ОбластьДолжностиЧленыКомиссии = ПолучитьОбластьДолжностиПредседателяКомиссии(ДокументРезультат, ОбластьЧленыКомиссии);
    Если ОбластьДолжностиЧленыКомиссии <> Неопределено Тогда
        ДолжностьПредседателя = "";
        Если ПараметрПредседательКомиссии.Использование Тогда
            ДолжностьПредседателя = ПолучитьПредставлениеДолжностиФизическогоЛица(
                    ПараметрПредседательКомиссии.Значение, ПараметрОрганизация.Значение, ДатаАктуальностиСведений);
        КонецЕсли;
        ОбластьДолжностиЧленыКомиссии.Текст = ДолжностьПредседателя;
    КонецЕсли;

    // Заполнение полей члены комиссии:
    ПараметрЧленыКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ЧленыКомиссии");

    // Формирование списка представлений членов комиссии
    СписокЧленовКомиссии = Новый Массив;
    Если ПараметрЧленыКомиссии.Использование = Ложь Тогда
        // Список членов комиссии для заполнения вручную
        Для Сч = 0 По 2 Цикл
            СписокЧленовКомиссии.Добавить(Справочники.ФизическиеЛица.ПустаяСсылка());
        КонецЦикла;

    ИначеЕсли ТипЗнч(ПараметрЧленыКомиссии.Значение) <> Тип("СписокЗначений") Тогда
        СписокЧленовКомиссии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрЧленыКомиссии.Значение);
    Иначе
        СписокЧленовКомиссии = ПараметрЧленыКомиссии.Значение.ВыгрузитьЗначения();
    КонецЕсли;

    // Заполнение должностей и представлений челнов комиссии
    НомерТекущейСтрокиЧленаКомиссии = 0;
    Для Каждого ТекущийЧленКомиссии Из СписокЧленовКомиссии Цикл
        ОбластьЧленыКомиссии = ПолучитьОбластьЧленаКомиссии(ДокументРезультат, ОбластьЧленыКомиссии);
        Если ОбластьЧленыКомиссии = Неопределено Тогда
            Продолжить;
        КонецЕсли;

        // Представление
        ТекПредставлениеЧленаКомиссии = ПолучитьФИОФизическогоЛица(ТекущийЧленКомиссии, ДатаАктуальностиСведений);
        НомерТекущейСтрокиЧленаКомиссии = ОбластьЧленыКомиссии.Низ;
        ОбластьЧленыКомиссии.Текст = ТекПредставлениеЧленаКомиссии;

        // Должность
        ОбластьДолжностиЧленыКомиссии = ПолучитьОбластьДолжностиЧленаКомиссии(ДокументРезультат, ОбластьЧленыКомиссии);
        Если ОбластьДолжностиЧленыКомиссии = Неопределено Тогда
            Продолжить;
        КонецЕсли;
        ОбластьДолжностиЧленыКомиссии.Текст = ПолучитьПредставлениеДолжностиФизическогоЛица(
                ТекущийЧленКомиссии, ПараметрОрганизация.Значение, ДатаАктуальностиСведений);
    КонецЦикла;

    // Удаление неиспользуемых строк
    Пока Истина И ОбластьЧленыКомиссии <> Неопределено Цикл
        ИсходнаяОбластьЧленыКомиссии = ОбластьЧленыКомиссии;
        ОбластьЧленыКомиссии = ПолучитьОбластьЧленаКомиссии(ДокументРезультат, ОбластьЧленыКомиссии);
        Если ОбластьЧленыКомиссии = Неопределено Тогда
            Прервать; // Выход из цикла
        КонецЕсли;

        УдалитьОбластьЧленаКомиссии(ОбластьЧленыКомиссии, ДокументРезультат);
        ОбластьЧленыКомиссии = ИсходнаяОбластьЧленыКомиссии;
        ОбластьДолжностиЧленыКомиссии = Неопределено;
    КонецЦикла;

    Возврат Макс(НомерТекущейСтрокиЧленаКомиссии, НомерТекущейСтроки);
КонецФункции

// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
Функция ПолучитьСтруктуруПредставленияФизическогоЛица(Знач ФизЛицо, Знач ДатаАктуальности = Неопределено)
    Если ДатаАктуальности = Неопределено Тогда
        ДатаАктуальности = ПолучитьДатуПериодаОтчета();
    КонецЕсли;

    Возврат УчетЗарплаты.ПредставлениеФизическогоЛица(ФизЛицо, ДатаАктуальности);
КонецФункции

Функция ПолучитьПредставлениеДолжностиФизическогоЛица(Знач ФизЛицо, Знач Организация, Знач ДатаАктуальности = Неопределено)
    РезультатФункции = "";

    ДанныеСотрудника = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(ФизЛицо, Организация, ДатаАктуальности);
    КадровыеДанныеОсновногоСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДанныеСотрудника, "Должность", ДатаАктуальности);

    Если КадровыеДанныеОсновногоСотрудника.Количество() > 0 Тогда
        РезультатФункции = Строка(КадровыеДанныеОсновногоСотрудника[0].Должность);
    Иначе
        Запрос = Новый Запрос;
        Запрос.Текст =
            "ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |   ДанныеФизическихЛиц.Должность КАК Должность
            |ИЗ
            |   РегистрСведений.lc_ДанныеФизическихЛиц.СрезПоследних(&ДатаАктуальности, Организация = &Организация И ФизЛицо = &ФизЛицо) КАК ДанныеФизическихЛиц
            |";

        Если ДатаАктуальности = Неопределено Тогда
            Запрос.Текст = СтрЗаменить(Запрос.Текст, "СрезПоследних(&ДатаАктуальности", "СрезПоследних(");
        Иначе
            Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
        КонецЕсли;

        Запрос.УстановитьПараметр("Организация", Организация);
        Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);

        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();

        Пока Выборка.Следующий() Цикл
            РезультатФункции = Строка(Выборка.Должность);
            Прервать;
        КонецЦикла;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - Строка
Функция ПолучитьФИОФизическогоЛица(Знач ФизЛицо, Знач ДатаАктуальности = Неопределено)
    СтруктуруПредставления = ПолучитьСтруктуруПредставленияФизическогоЛица(ФизЛицо, ДатаАктуальности);

    Возврат СтруктуруПредставления.ФамилияИО;
КонецФункции

// Возвращаемое значение:
//  - Дата
Функция ПолучитьДатуПериодаОтчета()
    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");

    РезультатФункции = ПараметрПериод.Значение;
    РезультатФункции = ?(ТипЗнч(РезультатФункции) = Тип("Дата"), РезультатФункции, РезультатФункции.Дата);

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  ОбластьНачалаПоиска - ОбластьЯчеекТабличногоДокумента, Неопределено
//  ТекстПоиска - Строка, Неопределено
// Возвращаемое значение:
//  - ОбластьЯчеекТабличногоДокумента, Неопределено
Функция ПолучитьОбластьЧленаКомиссии(
        Знач ТабличныйДокумент, Знач ОбластьНачалаПоиска = Неопределено, Знач ТекстПоиска = Неопределено)

    ТекстПоиска = ?(ТекстПоиска = Неопределено, ПолучитьТекстПоискаЧленаКомиссии(), ТекстПоиска);

    Возврат ТабличныйДокумент.НайтиТекст(ТекстПоиска, ОбластьНачалаПоиска, , Истина, , Истина, Истина);
КонецФункции

// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  ОбластьНачалаПоиска - ОбластьЯчеекТабличногоДокумента, Неопределено
//  ТекстПоиска - Строка, Неопределено
// Возвращаемое значение:
//  - ОбластьЯчеекТабличногоДокумента, Неопределено
Функция ПолучитьОбластьПредседателяКомиссии(
        Знач ТабличныйДокумент, Знач ОбластьНачалаПоиска = Неопределено, Знач ТекстПоиска = Неопределено)

    ТекстПоиска = ?(ТекстПоиска = Неопределено, ПолучитьТекстПоискаПредседателяКомиссии(), ТекстПоиска);

    Возврат ПолучитьОбластьЧленаКомиссии(ТабличныйДокумент, ОбластьНачалаПоиска, ТекстПоиска);
КонецФункции

// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  ОбластьПредседателяКомиссии - ОбластьЯчеекТабличногоДокумента
// Возвращаемое значение:
//  - ОбластьЯчеекТабличногоДокумента, Неопределено
Функция ПолучитьОбластьДолжностиПредседателяКомиссии(Знач ТабличныйДокумент, Знач ОбластьПредседателяКомиссии)
    Возврат ПолучитьОбластьДолжностиЧленаКомиссии(ТабличныйДокумент, ОбластьПредседателяКомиссии);
КонецФункции

// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  ОбластьЧленаКомиссии - ОбластьЯчеекТабличногоДокумента
// Возвращаемое значение:
//  - ОбластьЯчеекТабличногоДокумента, Неопределено
Функция ПолучитьОбластьДолжностиЧленаКомиссии(Знач ТабличныйДокумент, Знач ОбластьЧленаКомиссии)
    ИндексКолонкиДолжности = 4;
    Если ОбластьЧленаКомиссии = Неопределено ИЛИ ОбластьЧленаКомиссии.Лево = ИндексКолонкиДолжности Тогда
        Возврат Неопределено;
    КонецЕсли;

    Возврат ТабличныйДокумент.Область(ОбластьЧленаКомиссии.Верх, ИндексКолонкиДолжности);
КонецФункции

// Параметры:
//  ОбластьЧленыКомиссии - ОбластьЯчеекТабличногоДокумента
//  ТабличныйДокумент - ТабличныйДокумент
Процедура УдалитьОбластьЧленаКомиссии(ОбластьЧленыКомиссии, Знач ТабличныйДокумент)
    ТабличныйДокумент.УдалитьОбласть(
        ТабличныйДокумент.Область(
            ОбластьЧленыКомиссии.Верх, , ОбластьЧленыКомиссии.Низ + 2), ТипСмещенияТабличногоДокумента.ПоВертикали);
КонецПроцедуры

// Возвращаемое значение:
// - Строка
Функция ПолучитьТекстПоискаЧленаКомиссии()
    Возврат "%%ЧленыКомиссии%%";
КонецФункции

// Возвращаемое значение:
// - Строка
Функция ПолучитьТекстПоискаПредседателяКомиссии()
    Возврат "%%ПредседательКомиссии%%";
КонецФункции

// Параметры:
//  Наименование - Строка
//  ТолькоИспользуемые - Булево - По умолчанию Ложь
// Возвращаемое значение:
// - ГруппировкаКомпоновкиДанных, Неопределено
Функция ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(Знач Наименование, Знач ТолькоИспользуемые = Ложь)
    РезультатФункции = Неопределено;

    Для Каждого ЭлементСтруктуры Из ЭтотОбъект.КомпоновщикНастроек.Настройки.Структура Цикл
        Если ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
            Продолжить;
        КонецЕсли;

        Если (ТолькоИспользуемые = Ложь ИЛИ ЭлементСтруктуры.Использование = Истина) И ЭлементСтруктуры.Имя = Наименование Тогда
            РезультатФункции = ЭлементСтруктуры;
            Прервать; // Значение найдено
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - Булево
Функция ЭтоРасшифровкаОтчета()
    РезультатФункции = Ложь;

    НайденнаяГруппировка = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию("Расшифровка", Истина);

    РезультатФункции = НайденнаяГруппировка <> Неопределено;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - Булево
Функция ОтчетСодержитГруппировкуПодвал()
    РезультатФункции = Ложь;

    НайденнаяГруппировка = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(ПолучитьНаименованиеГруппировкиПодвала(), Истина);

    РезультатФункции = НайденнаяГруппировка <> Неопределено;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - ГруппировкаКомпоновкиДанных, Неопределено
Функция ПолучитьГруппировкуПодвал()
    РезультатФункции = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(ПолучитьНаименованиеГруппировкиПодвала(), Ложь);
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - ГруппировкаКомпоновкиДанных, Неопределено
Функция ПолучитьГруппировкуШапка()
    РезультатФункции = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(ПолучитьНаименованиеГруппировкиШапки(), Ложь);
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - Булево
Функция ЭтоВариантОтчетаДляПечати()
    ПараметрДляПечати =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ДляПечати");

    Возврат ?(ПараметрДляПечати.Значение = Неопределено, ПараметрДляПечати.Использование, ПараметрДляПечати.Значение);
КонецФункции

// Возвращаемое значение:
// - Строка
Функция ПолучитьНаименованиеГруппировкиПодвала()
    Возврат "Подвал";
КонецФункции

// Возвращаемое значение:
// - Строка
Функция ПолучитьНаименованиеГруппировкиШапки()
    Возврат "Шапка";
КонецФункции

Функция ПолучитьТекстЗаменыЗаголовкаГруппаОС()
    Возврат "%%Удалить_ГруппаОС%%";
КонецФункции

Функция ПолучитьТекстЗаменыЗаголовкаОС()
    Возврат "Основное средство";
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС --
