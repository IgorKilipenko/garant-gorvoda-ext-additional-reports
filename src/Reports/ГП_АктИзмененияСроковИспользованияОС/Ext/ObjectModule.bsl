// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС ++
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    ИнициализироватьПараметры();

    ЭтоРасшифровкаОтчета = ЭтоРасшифровкаОтчета();
    ЭтоВариантОтчетаДляПечати = ?(ЭтоРасшифровкаОтчета, Ложь, ЭтоВариантОтчетаДляПечати());

    ГруппировкаШапка = ПолучитьГруппировкуШапка();
    ГруппировкаШапка.Использование = ЭтоВариантОтчетаДляПечати;
    ГруппировкаПодвал = ПолучитьГруппировкуПодвал();
    ГруппировкаПодвал.Использование = ЭтоВариантОтчетаДляПечати;

    // Настройка параметров вывода:
    НастроитьПараметрыВывода(ЭтоВариантОтчетаДляПечати);

    // Временно выключаем использование служебных параметров на время формирования отчета
    ИспользуемыеПользователемСлужебныеПараметры = ПолучитьИспользуемыеПользователемСлужебныеПараметры();
    Для Каждого ИспользуемыйПараметр Из ИспользуемыеПользователемСлужебныеПараметры Цикл
        ИспользуемыйПараметр.Использование = Ложь;
    КонецЦикла;

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;

    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    // Включаем служебные параметры обратно
    Для Каждого ИспользуемыйПараметр Из ИспользуемыеПользователемСлужебныеПараметры Цикл
        ИспользуемыйПараметр.Использование = Истина;
    КонецЦикла;

    Если ЭтоРасшифровкаОтчета = Ложь Тогда
        МаксимумКолонокАкта = 13;
        НомерСтрокиФиксацииСверху = ПронумероватьКолонкиОтчета(ДокументРезультат, МаксимумКолонокАкта);

        МаксимумСтрокФиксации = 15;
        ДокументРезультат.ФиксацияСверху = НомерСтрокиФиксацииСверху;
        Если ДокументРезультат.ФиксацияСверху > МаксимумСтрокФиксации Тогда
            ДокументРезультат.ФиксацияСверху = 0;
        КонецЕсли;

        Если ЭтоВариантОтчетаДляПечати = Истина Тогда
            // Заполнение подвала
            ГруппировкаПодвал = ПолучитьГруппировкуПодвал();
            Если ЭтоВариантОтчетаДляПечати() = Истина Тогда
                ЗаполнитьПоляЧленовКомиссии(ДокументРезультат,
                    ДокументРезультат.Область(НомерСтрокиФиксацииСверху, , НомерСтрокиФиксацииСверху));
            КонецЕсли;

            // Установка повторения заголовка таблицы на каждой странице печати
            ОбластьСтрокЗаголовкаТаблицы = ДокументРезультат.Область(
                Макс(НомерСтрокиФиксацииСверху - 2, 0), , НомерСтрокиФиксацииСверху);
            ДокументРезультат.ПовторятьПриПечатиСтроки = ОбластьСтрокЗаголовкаТаблицы;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС --

// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС ++
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОсновнойНаборДанных()
    Возврат ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
КонецФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();

    // Сбор данных:
    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");

    ПараметрНачалоПериода =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "НачалоПериода");

    ПараметрОрганизация =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Организация");
    Если ПустаяСтрока(Строка(ПараметрОрганизация.Значение)) Тогда
        ПараметрОрганизация.Значение = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
        БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек,
            "Организация",
            ПараметрОрганизация.Значение);
    КонецЕсли;

    ПараметрПодразделенияОС =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПодразделенияОС");

    ПараметрМОЛ =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "МОЛ");

    ПараметрДатаАкта =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ДатаАкта");

    // Установка значений параметров:
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ЗадерживатьПериодДействия",
        Перечисления.АлгоритмыПериодаАмортизации.ЗадерживатьАмортизацию(
            ПараметрНачалоПериода.Значение, ПараметрОрганизация.Значение));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет01",
        ПланыСчетов.Хозрасчетный.ОсновныеСредства); // Счет 01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет02",
        ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств); // Счет 02

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет02_01",
        ПланыСчетов.Хозрасчетный.АмортизацияОС_01); // Счет 02.01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "Счет84_01",
        ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению); // Счет 84.01

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ФИОРуководителя",
        ГП_РаботаСОтчетами.ПолучитьФИОПредставителя(
            "Руководитель", ПараметрОрганизация.Значение, ПараметрПериод.Значение));

    // Подразделение представление
    ПодразделениеПредставление = "                  ";
    Если ПараметрПодразделенияОС.Использование = Истина Тогда
        ПодразделениеПредставление = ПараметрПодразделенияОС.Значение;
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ПодразделениеПредставление",
        ПодразделениеПредставление);

    // МОЛ представление
    МОЛПредставление = "                  ";
    Если ПараметрМОЛ.Использование = Истина Тогда
        МОЛПредставление = ПараметрМОЛ.Значение;
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "МОЛПредставление",
        МОЛПредставление);

    // Дата акта представление
    ДатаАктаПредставление = """___"" ___________ ______ г.";
    Если ПараметрДатаАкта.Использование = Истина Тогда
        ДатаАктаПредставление = Формат(НачалоДня(ПараметрДатаАкта.Значение), "ДФ='dd MMMM yyyy'") + "г.";
    КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "ДатаАктаПредставление",
        ДатаАктаПредставление);
КонецПроцедуры

// Возвращаемое значение:
//  - Массив
Функция ПолучитьИспользуемыеПользователемСлужебныеПараметры()
    РезультатФункции = Новый Массив;

    СписокСлужебныхПараметровДоступныхПользователю = ПолучитьСписокСлужебныхПараметровДоступныхПользователю();
    Для Каждого ЭлементКЗ Из СписокСлужебныхПараметровДоступныхПользователю Цикл
        Если ЭлементКЗ.Значение.Использование = Истина Тогда
            РезультатФункции.Добавить(ЭлементКЗ.Значение);
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

Процедура НастроитьПараметрыВывода(Знач ДляПечати)
    // Макет оформления
    ЭлементПараметраВывода = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(
            Новый ПараметрКомпоновкиДанных("МакетОформления"));
    ЭлементПараметраВывода.Использование = Истина;
    ЭлементПараметраВывода.Значение = ?(ДляПечати = Истина, "ОформлениеОтчетовЧерноБелый", "ОформлениеОтчетовЗеленый");

    // Вывод параметры данных
    ЭлементПараметраВывода = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(
            Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
    ЭлементПараметраВывода.Использование = Истина;
    Если ДляПечати = Истина Тогда
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
    Иначе
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
    КонецЕсли;

    // Вывод отбора
    ЭлементПараметраВывода = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(
            Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"));
    ЭлементПараметраВывода.Использование = Истина;
    Если ДляПечати = Истина Тогда
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
    Иначе
        ЭлементПараметраВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
    КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//  - Соответствие
Функция ПолучитьСписокСлужебныхПараметровДоступныхПользователю()
    СписокСлужебныхПараметровДоступныхПользователю = Новый Соответствие;

    ПараметрПредседательКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПредседательКомиссии");
    СписокСлужебныхПараметровДоступныхПользователю.Вставить(
        ПараметрПредседательКомиссии.Параметр, ПараметрПредседательКомиссии);

    ПараметрЧленыКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ЧленыКомиссии");
    СписокСлужебныхПараметровДоступныхПользователю.Вставить(
        ПараметрЧленыКомиссии.Параметр, ПараметрЧленыКомиссии);

    Возврат СписокСлужебныхПараметровДоступныхПользователю;
КонецФункции

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), Дата(1, 1, 1));

    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");

    РезультатФункции.НачалоПериода = НачалоДня(ПараметрПериод.Значение);
    РезультатФункции.КонецПериода = КонецДня(ПараметрПериод.Значение);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Период", НачалоДня(ПараметрПериод.Значение));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "НачалоПериода", РезультатФункции.НачалоПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "НачалоПериодаГраница",
        Новый Граница(РезультатФункции.НачалоПериода, ВидГраницы.Включая));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "КонецПериода", РезультатФункции.КонецПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "КонецПериодаГраница",
        Новый Граница(РезультатФункции.КонецПериода, ВидГраницы.Включая));

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ДокументРезультат - ТабличныйДокумент
//  МаксимумКолонокАкта - Число
// Возвращаемое значение:
//  - Число - Номер строки добавленной области
Функция ПронумероватьКолонкиОтчета(ДокументРезультат, Знач МаксимумКолонокАкта)
    НомерСтрокиФиксации = ДокументРезультат.ФиксацияСверху;

    Если НомерСтрокиФиксации <= 0 Тогда
        Если ДокументРезультат.ФиксацияСверху = 0 Тогда
            ОбластьДляФиксации = ДокументРезультат.НайтиТекст("Основное средство", , , Ложь);
            Если ОбластьДляФиксации <> Неопределено Тогда
                ДокументРезультат.ФиксацияСверху = ОбластьДляФиксации.Низ;
            Иначе
                НомерСтрокиФиксации = 0;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

    СтрокВШапке = НомерСтрокиФиксации;
    КоличествоКолонок = Мин(ДокументРезультат.ШиринаТаблицы, МаксимумКолонокАкта);

    ОбластьШапки = ДокументРезультат.Область(СтрокВШапке, , СтрокВШапке);
    ОбластьПриемник = ДокументРезультат.Область(СтрокВШапке + 1, , СтрокВШапке + 1);
    ДокументРезультат.ВставитьОбласть(ОбластьШапки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоГоризонтали, Ложь);

    Для НомерТекущейСтроки = 1 По КоличествоКолонок Цикл
        ТекОбласть = ДокументРезультат.Область(СтрокВШапке + 1, НомерТекущейСтроки);
        ЗаполнитьЗначенияСвойств(ТекОбласть, ДокументРезультат.Область(СтрокВШапке, НомерТекущейСтроки));
        ТекОбласть.Текст = Строка(НомерТекущейСтроки);
        ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
    КонецЦикла;

    Возврат НомерСтрокиФиксации + 1;
КонецФункции

// Параметры:
//  ДокументРезультат - ТабличныйДокумент
//  ОбластьНачалаПоиска - ОбластьЯчеекТабличногоДокумента, Неопределено
// Возвращаемое значение:
//  - Число
Функция ЗаполнитьПоляЧленовКомиссии(ДокументРезультат, Знач ОбластьНачалаПоиска = Неопределено)
    // Заполнение поля председатель комиссии:
    ПараметрПредседательКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПредседательКомиссии");

    ОбластьЧленыКомиссии = ПолучитьОбластьПредседателяКомиссии(ДокументРезультат, ОбластьНачалаПоиска);
    НомерТекущейСтроки = ?(ОбластьЧленыКомиссии = Неопределено, 0, ОбластьЧленыКомиссии.Низ);

    Если ОбластьЧленыКомиссии = Неопределено Тогда
        Возврат НомерТекущейСтроки; // Область комиссии не не найдена
    КонецЕсли;

    ДатаАктуальностиСведений = ПолучитьДатуПериодаОтчета();

    ОбластьЧленыКомиссии.Текст = ?(ПараметрПредседательКомиссии.Использование,
            ПолучитьФИОФизическогоЛица(ПараметрПредседательКомиссии.Значение, ДатаАктуальностиСведений), "");

    // Заполнение полей члены комиссии:
    ПараметрЧленыКомиссии =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ЧленыКомиссии");

    // Формирование списка представлений членов комиссии
    СписокЧленовКомиссии = Новый СписокЗначений;
    Если ПараметрЧленыКомиссии.Использование = Ложь Тогда
        // Список членов комиссии для заполнения вручную
        СписокЧленовКомиссии = Новый СписокЗначений;
        СписокЧленовКомиссии.Добавить("");
        СписокЧленовКомиссии.Добавить("");
        СписокЧленовКомиссии.Добавить("");

    ИначеЕсли ТипЗнч(ПараметрЧленыКомиссии.Значение) <> Тип("СписокЗначений") Тогда
        СписокЧленовКомиссии.Добавить(
            ПолучитьФИОФизическогоЛица(ПараметрЧленыКомиссии.Значение, ДатаАктуальностиСведений));

    Иначе
        Для Каждого ТекущийЧленКомиссии Из ПараметрЧленыКомиссии.Значение Цикл
            СписокЧленовКомиссии.Добавить(
                ПолучитьФИОФизическогоЛица(ТекущийЧленКомиссии.Значение, ДатаАктуальностиСведений));
        КонецЦикла;
    КонецЕсли;

    НомерТекущейСтрокиЧленаКомиссии = 0;
    Для Каждого ПредставлениеТекущегоЧленаКомиссии Из СписокЧленовКомиссии Цикл
        ОбластьЧленыКомиссии = ПолучитьОбластьЧленаКомиссии(ДокументРезультат, ОбластьЧленыКомиссии);
        Если ОбластьЧленыКомиссии <> Неопределено Тогда
            НомерТекущейСтрокиЧленаКомиссии = ОбластьЧленыКомиссии.Низ;
            ОбластьЧленыКомиссии.Текст = ПредставлениеТекущегоЧленаКомиссии;
        КонецЕсли;
    КонецЦикла;

    // Удаление неиспользуемых строк
    Пока Истина И ОбластьЧленыКомиссии <> Неопределено Цикл
        ИсходнаяОбластьЧленыКомиссии = ОбластьЧленыКомиссии;
        ОбластьЧленыКомиссии = ПолучитьОбластьЧленаКомиссии(ДокументРезультат, ОбластьЧленыКомиссии);
        Если ОбластьЧленыКомиссии = Неопределено Тогда
            Прервать; // Выход из цикла
        КонецЕсли;

        УдалитьОбластьЧленаКомиссии(ОбластьЧленыКомиссии, ДокументРезультат);
        ОбластьЧленыКомиссии = ИсходнаяОбластьЧленыКомиссии;
    КонецЦикла;

    Возврат Макс(НомерТекущейСтрокиЧленаКомиссии, НомерТекущейСтроки);
КонецФункции

// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - Структура
Функция ПолучитьСтруктуруПредставленияФизическогоЛица(Знач ФизЛицо, Знач ДатаАктуальности = Неопределено)
    Если ДатаАктуальности = Неопределено Тогда
        ДатаАктуальности = ПолучитьДатуПериодаОтчета();
    КонецЕсли;

    Возврат УчетЗарплаты.ПредставлениеФизическогоЛица(ФизЛицо, ДатаАктуальности);
КонецФункции

// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  ДатаАктуальности - Дата, Неопределено
// Возвращаемое значение:
//  - Строка
Функция ПолучитьФИОФизическогоЛица(Знач ФизЛицо, Знач ДатаАктуальности = Неопределено)
    СтруктуруПредставления = ПолучитьСтруктуруПредставленияФизическогоЛица(ФизЛицо, ДатаАктуальности);

    Возврат СтруктуруПредставления.ФамилияИО;
КонецФункции

// Возвращаемое значение:
//  - Дата
Функция ПолучитьДатуПериодаОтчета()
    ПараметрПериод =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "Период");

    РезультатФункции = ПараметрПериод.Значение;
    РезультатФункции = ?(ТипЗнч(РезультатФункции) = Тип("Дата"), РезультатФункции, РезультатФункции.Дата);

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  ОбластьНачалаПоиска - ОбластьЯчеекТабличногоДокумента, Неопределено
//  ТекстПоиска - Строка, Неопределено
// Возвращаемое значение:
//  - ОбластьЯчеекТабличногоДокумента, Неопределено
Функция ПолучитьОбластьЧленаКомиссии(
        Знач ТабличныйДокумент, Знач ОбластьНачалаПоиска = Неопределено, Знач ТекстПоиска = Неопределено)

    ТекстПоиска = ?(ТекстПоиска = Неопределено, ПолучитьТекстПоискаЧленаКомиссии(), ТекстПоиска);

    Возврат ТабличныйДокумент.НайтиТекст(ТекстПоиска, ОбластьНачалаПоиска, , Истина, , Истина, Истина);
КонецФункции

// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  ОбластьНачалаПоиска - ОбластьЯчеекТабличногоДокумента, Неопределено
//  ТекстПоиска - Строка, Неопределено
// Возвращаемое значение:
//  - ОбластьЯчеекТабличногоДокумента, Неопределено
Функция ПолучитьОбластьПредседателяКомиссии(
        Знач ТабличныйДокумент, Знач ОбластьНачалаПоиска = Неопределено, Знач ТекстПоиска = Неопределено)

    ТекстПоиска = ?(ТекстПоиска = Неопределено, ПолучитьТекстПоискаПредседателяКомиссии(), ТекстПоиска);

    Возврат ПолучитьОбластьЧленаКомиссии(ТабличныйДокумент, ОбластьНачалаПоиска, ТекстПоиска);
КонецФункции

// Параметры:
//  ОбластьЧленыКомиссии - ОбластьЯчеекТабличногоДокумента
//  ТабличныйДокумент - ТабличныйДокумент
Процедура УдалитьОбластьЧленаКомиссии(ОбластьЧленыКомиссии, Знач ТабличныйДокумент)
    ТабличныйДокумент.УдалитьОбласть(
        ТабличныйДокумент.Область(
            ОбластьЧленыКомиссии.Верх + 1, , ОбластьЧленыКомиссии.Низ), ТипСмещенияТабличногоДокумента.ПоВертикали);
КонецПроцедуры

// Возвращаемое значение:
// - Строка
Функция ПолучитьТекстПоискаЧленаКомиссии()
    Возврат "%%ЧленыКомиссии%%";
КонецФункции

// Возвращаемое значение:
// - Строка
Функция ПолучитьТекстПоискаПредседателяКомиссии()
    Возврат "%%ПредседательКомиссии%%";
КонецФункции

// Параметры:
//  Наименование - Строка
//  ТолькоИспользуемые - Булево - По умолчанию Ложь
// Возвращаемое значение:
// - ГруппировкаКомпоновкиДанных, Неопределено
Функция ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(Знач Наименование, Знач ТолькоИспользуемые = Ложь)
    РезультатФункции = Неопределено;

    Для Каждого ЭлементСтруктуры Из ЭтотОбъект.КомпоновщикНастроек.Настройки.Структура Цикл
        Если ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
            Продолжить;
        КонецЕсли;

        Если (ТолькоИспользуемые = Ложь ИЛИ ЭлементСтруктуры.Использование = Истина) И ЭлементСтруктуры.Имя = Наименование Тогда
            РезультатФункции = ЭлементСтруктуры;
            Прервать; // Значение найдено
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - Булево
Функция ЭтоРасшифровкаОтчета()
    РезультатФункции = Ложь;

    НайденнаяГруппировка = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию("Расшифровка", Истина);

    РезультатФункции = НайденнаяГруппировка <> Неопределено;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - Булево
Функция ОтчетСодержитГруппировкуПодвал()
    РезультатФункции = Ложь;

    НайденнаяГруппировка = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(ПолучитьНаименованиеГруппировкиПодвала(), Истина);

    РезультатФункции = НайденнаяГруппировка <> Неопределено;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - ГруппировкаКомпоновкиДанных, Неопределено
Функция ПолучитьГруппировкуПодвал()
    РезультатФункции = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(ПолучитьНаименованиеГруппировкиПодвала(), Ложь);
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - ГруппировкаКомпоновкиДанных, Неопределено
Функция ПолучитьГруппировкуШапка()
    РезультатФункции = ПолучитьГруппировкуСтруктурыОтчетаПоНаименованию(ПолучитьНаименованиеГруппировкиШапки(), Ложь);
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// - Булево
Функция ЭтоВариантОтчетаДляПечати()
    ПараметрДляПечати =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ДляПечати");

    Возврат ?(ПараметрДляПечати.Значение = Неопределено, ПараметрДляПечати.Использование, ПараметрДляПечати.Значение);
КонецФункции

// Возвращаемое значение:
// - Строка
Функция ПолучитьНаименованиеГруппировкиПодвала()
    Возврат "Подвал";
КонецФункции

// Возвращаемое значение:
// - Строка
Функция ПолучитьНаименованиеГруппировкиШапки()
    Возврат "Шапка";
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 27.02.2025 [F00234713] Отчет Акт об изменении сроков ОС --
