
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    
    // Инициализация параметров
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ВидОтчета", "недоплаты и переплаты");
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ВидыПлощадейОбщаяПлощадь", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Льгота", Ложь);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Перерасчет", Ложь);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ПовышающийКоэффициент", Ложь);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Пени", Ложь);
        
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ВидУслугиХВС", Справочники.КВП_ВидыУслуг.НайтиПоКоду("00-000001", Истина));
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ВидУслугиГВС", Справочники.КВП_ВидыУслуг.НайтиПоКоду("00-000003", Истина));
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ВидУслугиВодоотведение", Справочники.КВП_ВидыУслуг.НайтиПоКоду("00-000004", Истина));
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ВидУслугиНегативноеВоздействие", Справочники.КВП_ВидыУслуг.НайтиПоКоду("00-000006", Истина));

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    
    ВнешнийНаборДанных = ПолучитьВнешниеНаборыДанных();
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

// Функция возвращает внешние наборы данных.
Функция ПолучитьВнешниеНаборыДанных()
    ВнешниеНаборыДанных = Новый Структура();

    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

    МассивВидовКонтактнойИнформации = Новый Массив;
    МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);

    МассивЗданий = Новый Массив;

    ЗапросВыборкиЗданий = Новый Запрос;
    ЗапросВыборкиЗданий.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_Здания.Ссылка
        |ИЗ
        |	Справочник.КВП_Здания КАК КВП_Здания";

    ВыборкаЗданий = ЗапросВыборкиЗданий.Выполнить().Выбрать();
    Пока ВыборкаЗданий.Следующий() Цикл
        МассивЗданий.Добавить(ВыборкаЗданий.Ссылка);
    КонецЦикла;

    УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);

    Запрос.Текст =
        "ВЫБРАТЬ
        |	втКонтактнаяИнформация.Объект КАК Здание,
        |	втКонтактнаяИнформация.Улица
        |ИЗ
        |	втКонтактнаяИнформация КАК втКонтактнаяИнформация";

    ВнешниеНаборыДанных.Вставить("втАдресаЗданий", Запрос.Выполнить().Выгрузить());

    Возврат ВнешниеНаборыДанных;
КонецФункции
