#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    ИнициализироватьПараметры();

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(),
            ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ДанныеЗаполнения = Новый ТаблицаЗначений;
    ДанныеЗаполнения = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    // Подготовка общих данных отчета
    ПараметрОрганизация = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.Настройки, "Организация");
    ПараметрПериод = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Период");
    ОбщиеДанныеОтчета = Новый Структура("Дата, Организация", ПараметрПериод.Значение, ПараметрОрганизация.Значение);

    // Формирование табличного документа
    ДокументРезультат = СформироватьТабличныйДокумент(
            ОбщиеДанныеОтчета, ДанныеЗаполнения, ДокументРезультат);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();

    ОрганизацияПоУмолчанию = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "Организация", ОрганизацияПоУмолчанию);

    // Заполняем параметр ВидыСубконто
    ВидыСубконто = Новый СписокЗначений;
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидыСубконто", ВидыСубконто);

    // Заполняем параметр ФильтрСписокСчетов
    ФильтрСписокСчетов = ПолучитьСчета();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);

    ПараметрФильтрСписокСчетов =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов");
    Если ПараметрФильтрСписокСчетов <> Неопределено
        И (ПараметрФильтрСписокСчетов.Значение = Неопределено
            ИЛИ ПараметрФильтрСписокСчетов.Значение.Количество() = 0) Тогда
        БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);
    КонецЕсли;
КонецПроцедуры

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("Период", Дата(1, 1, 1));

    ПараметрПериодОтчета =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Период");

    //РезультатФункции.Период = Новый Граница(КонецДня(ПараметрПериодОтчета.Значение), ВидГраницы.Включая);
    РезультатФункции.Период = КонецДня(ПараметрПериодОтчета.Значение);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Период", РезультатФункции.Период);

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСчета()
    РезультатФункции = Новый СписокЗначений;
    РезультатФункции.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТабличныйДокумент
Функция ПолучитьМакетаАктаОСВПоАбоненту()
    Возврат Отчеты.ГП_ОтчетПоДебиторам.ПолучитьМакет("ПФ_MXL_Макет");
КонецФункции

Функция ПолучитьФИОПредставителя(Знач Должность, Знач Организация, Знач ДатаАктуальности)
    РезультатФункции = "";

    ОтветственныеЛицаОрганизации = ОтветственныеЛицаБППовтИсп.ОтветственныеЛица(Организация, ДатаАктуальности);

    ИмяПоляПредставления = Должность + "ФИО";
    Если ОтветственныеЛицаОрганизации.Свойство(ИмяПоляПредставления) Тогда
        РезультатФункции = ОтветственныеЛицаОрганизации[ИмяПоляПредставления].Представление;
    КонецЕсли;

    Если ПустаяСтрока(РезультатФункции) Тогда
        Если Должность = "ГлавныйБухгалтер" Тогда
            РезультатФункции = "Антипова О.А.";
        ИначеЕсли Должность = "Директор" Тогда
            РезультатФункции = "Машошин О.Л.";
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция СформироватьТабличныйДокумент(Знач ОбщиеДанные, Знач ДанныеЗаполнения, ТабличныйДокумент)
    Макет = ?(Макет = Неопределено, ПолучитьМакетаАктаОСВПоАбоненту(), Макет);

    УстановитьПривилегированныйРежим(Истина);

    ТабличныйДокумент = ?(ТабличныйДокумент = Неопределено, Новый ТабличныйДокумент, ТабличныйДокумент);
    ТабличныйДокумент.ПолеСлева = 5;
    ТабличныйДокумент.ПолеСправа = 5;
    ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
    ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
    ТабличныйДокумент.АвтоМасштаб = Истина;
    ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
    ТабличныйДокумент.ТолькоПросмотр = Истина;

    ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГП_ОтчетПоДебиторам_ОтчетПоДебиторам";

    Если ДанныеЗаполнения.Количество() = 0 Тогда
        // Документ без данных
        ОбщегоНазначения.СообщитьПользователю("Данные отсутствуют");
        Возврат ТабличныйДокумент;
    КонецЕсли;

    // Общие реквизиты шапки
    ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

    // Данные участников
    СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
            ОбщиеДанные.Организация, ОбщиеДанные.Дата);

    ОбластьМакета.Параметры.Дата = Формат(ОбщиеДанные.Дата, "ДФ='дд ММММ гггг'") + " г.";
    ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
    ТабличныйДокумент.Вывести(ОбластьМакета);

    // Создаем массив для проверки вывода
    МассивВыводимыхОбластей = Новый Массив;

    // Выводим многострочную часть документа
    ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
    ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщийИтогТаблицы");
    ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");

    СтруктураИтогов = Новый Структура("Сумма, СуммаПросрочено", 0, 0);

    КоличествоСтрокДанныхТЧ = ДанныеЗаполнения.Количество();
    НомерСтроки = 0;
    Для Каждого СтрокаДанныхТЧ Из ДанныеЗаполнения Цикл
        ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");

        НомерСтроки = НомерСтроки + 1;

        ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
        ОбластьМакета.Параметры.Контрагент = СтрокаДанныхТЧ.НаименованиеПолное;
        ОбластьМакета.Параметры.ЮрАдрес = СтрокаДанныхТЧ.ПредставлениеАдреса;
        ОбластьМакета.Параметры.РасчетныйСчет = СтрокаДанныхТЧ.НомерСчета;
        ОбластьМакета.Параметры.Сумма = СтрокаДанныхТЧ.СуммаКонечныйОстаток;
        ОбластьМакета.Параметры.СуммаПросрочено = 0; // !! Временно
        ОбластьМакета.Параметры.ПредставлениеБанка = СтрокаДанныхТЧ.ПредставлениеАдресаБанка;
        ОбластьМакета.Параметры.НомерКорСчета = СтрокаДанныхТЧ.КоррСчетБанка;

        СтруктураИтогов.Сумма = СтруктураИтогов.Сумма + СтрокаДанныхТЧ.СуммаКонечныйОстаток;

        Если НомерСтроки = 1 Тогда
            ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
        Иначе
            МассивВыводимыхОбластей.Очистить();
            МассивВыводимыхОбластей.Добавить(ОбластьМакета);
            Если НомерСтроки = КоличествоСтрокДанныхТЧ Тогда
                МассивВыводимыхОбластей.Добавить(ОбластьОбщийИтог);
                МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
            КонецЕсли;
            //Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
            //    ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
            //    ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
            //КонецЕсли;
        КонецЕсли;

        ТабличныйДокумент.Вывести(ОбластьМакета);

    КонецЦикла;

    ОбластьОбщийИтог.Параметры.Заполнить(СтруктураИтогов);
    ТабличныйДокумент.Вывести(ОбластьОбщийИтог);

    ОбластьПодвала.Параметры.ГлавныйБухгалтерФИО = ПолучитьФИОПредставителя("ГлавныйБухгалтер", ОбщиеДанные.Организация, ОбщиеДанные.Дата);
    ОбластьПодвала.Параметры.ДиректорФИО = ПолучитьФИОПредставителя("Директор", ОбщиеДанные.Организация, ОбщиеДанные.Дата);
    ТабличныйДокумент.Вывести(ОбластьПодвала);

    Если ПривилегированныйРежим() Тогда
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли;

    Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
