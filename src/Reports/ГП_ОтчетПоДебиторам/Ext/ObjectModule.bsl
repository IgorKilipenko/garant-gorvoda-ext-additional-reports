// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности ++
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    ИнициализироватьПараметры();

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(),
            ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ДанныеЗаполнения = Новый ТаблицаЗначений;
    ДанныеЗаполнения = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    // Подготовка общих данных отчета
    ЗначениеПараметраОрганизация = Удалить_ПолучитьЗначениеПараметраПоНаименованию("Организация", Неопределено, Ложь);
    ЗначениеПараметраПериод = Удалить_ПолучитьЗначениеПараметраПоНаименованию("ПериодОтчета", ТекущаяДатаСеанса());
    ЗначениеПараметраПериод = ?(ТипЗнч(ЗначениеПараметраПериод) = Тип("Дата"), ЗначениеПараметраПериод, ЗначениеПараметраПериод.Дата);
    ЗначениеПараметраФорматЗадолженности = Удалить_ПолучитьЗначениеПараметраПоНаименованию("ФорматЗадолженности", 0);
    ЗначениеПараметраДляПечати = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ДляПечати").Значение;
    ЗначениеПараметраВидЗадолженности = Удалить_ПолучитьЗначениеПараметраПоНаименованию("ВидЗадолженности", "");
    ЗначениеПараметраПорогДолга = Удалить_ПолучитьЗначениеПараметраПоНаименованию("ПорогДолга", 0);
    ОбщиеДанныеОтчета = Новый Структура("Дата, Организация, ФорматЗадолженности, ДляПечати, ВидЗадолженности, ПорогДолга",
            ЗначениеПараметраПериод,
            ЗначениеПараметраОрганизация,
            ПолучитьДанныеФорматаЗадолженности(ЗначениеПараметраФорматЗадолженности),
            ЗначениеПараметраДляПечати,
            ЗначениеПараметраВидЗадолженности,
            ЗначениеПараметраПорогДолга);

    // Формирование табличного документа
    ДокументРезультат = СформироватьТабличныйДокумент(
            ОбщиеДанныеОтчета, ДанныеЗаполнения, ДокументРезультат);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности --

// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности ++
#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();

    ОрганизацияПоУмолчанию = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "Организация", ОрганизацияПоУмолчанию);

    // Заполняем параметр ВидыСубконто
    ВидыСубконто = Новый СписокЗначений;
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидыСубконто", ВидыСубконто);

    // Заполняем параметр ФильтрСписокСчетов
    ФильтрСписокСчетов = ПолучитьСчета();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ФильтрСписокСчетов", ФильтрСписокСчетов);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "СчетаДт", ПолучитьСчетаДт());
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "СчетаКт", ПолучитьСчетаКт());
КонецПроцедуры

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("Период", Дата(1, 1, 1));

    ПараметрПериодОтчета =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПериодОтчета");

    РезультатФункции.Период = КонецДня(ПараметрПериодОтчета.Значение);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ПериодОтчета", РезультатФункции.Период);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ПериодГраница", Новый Граница(РезультатФункции.Период, ВидГраницы.Включая));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// Структура:
//  СписокЗначений из ПланСчетовСсылка.Хозрасчетный
Функция ПолучитьСчета()
    РезультатФункции = Новый СписокЗначений;

    РезультатФункции.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
    РезультатФункции.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// Структура:
//  СписокЗначений из ПланСчетовСсылка.Хозрасчетный
Функция ПолучитьСчетаДт()
    РезультатФункции = Новый СписокЗначений;

    РезультатФункции.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// Структура:
//  СписокЗначений из ПланСчетовСсылка.Хозрасчетный
Функция ПолучитьСчетаКт()
    РезультатФункции = Новый СписокЗначений;

    РезультатФункции.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТабличныйДокумент
Функция ПолучитьМакетаАктаОСВПоАбоненту()
    Возврат Отчеты.ГП_ОтчетПоДебиторам.ПолучитьМакет("ПФ_MXL_Макет");
КонецФункции

// Параметры:
//  Должность - Строка
//  Организация - СправочникСсылка.Организации
//  ДатаАктуальности - Дата
// Возвращаемое значение:
//  - Строка
Функция ПолучитьФИОПредставителя(Знач Должность, Знач Организация, Знач ДатаАктуальности)
    РезультатФункции = "";

    ОтветственныеЛицаОрганизации = ОтветственныеЛицаБППовтИсп.ОтветственныеЛица(Организация, ДатаАктуальности);

    ИмяПоляПредставления = Должность + "ФИО";
    Если ОтветственныеЛицаОрганизации.Свойство(ИмяПоляПредставления) Тогда
        РезультатФункции = ОтветственныеЛицаОрганизации[ИмяПоляПредставления].Представление;
    КонецЕсли;

    Если ПустаяСтрока(РезультатФункции) Тогда
        Если Должность = "ГлавныйБухгалтер" Тогда
            РезультатФункции = "Антипова О.А.";
        ИначеЕсли Должность = "Директор" Тогда
            РезультатФункции = "Машошин О.Л.";
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ОбщиеДанные - Структура
//  ДанныеЗаполнения - ТаблицаЗначений
//  ТабличныйДокумент - ТабличныйДокумент
// Возвращаемое значение:
//  - ТабличныйДокумент
Функция СформироватьТабличныйДокумент(Знач ОбщиеДанные, Знач ДанныеЗаполнения, Знач ТабличныйДокумент)
    Макет = ?(Макет = Неопределено, ПолучитьМакетаАктаОСВПоАбоненту(), Макет);

    УстановитьПривилегированныйРежим(Истина);

    ЭтоКредиторскаяЗадолженность = ОбщиеДанные.ВидЗадолженности = "Кредиторская";

    ТабличныйДокумент = ?(ТабличныйДокумент = Неопределено, Новый ТабличныйДокумент, ТабличныйДокумент);
    ТабличныйДокумент.ПолеСлева = 5;
    ТабличныйДокумент.ПолеСправа = 5;
    ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
    ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
    ТабличныйДокумент.АвтоМасштаб = Истина;
    ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
    ТабличныйДокумент.ТолькоПросмотр = Истина;

    ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГП_ОтчетПоДебиторам_ОтчетПоДебиторам";

    Если ДанныеЗаполнения.Количество() = 0 Тогда
        // Документ без данных
        ОбщегоНазначения.СообщитьПользователю("Данные отсутствуют");
        Возврат ТабличныйДокумент;
    КонецЕсли;

    // Общие реквизиты шапки
    ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

    // Данные участников
    СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
            ОбщиеДанные.Организация, ОбщиеДанные.Дата);

    ОбластьМакета.Параметры.Дата = Формат(ОбщиеДанные.Дата, "ДФ='дд ММММ гггг'") + " г.";
    ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
    ОбластьМакета.Параметры.ИННОрганизации = СведенияОбОрганизации.ИНН;
    ОбластьМакета.Параметры.АдресОрганизации = СведенияОбОрганизации.ЮридическийАдрес;
    Если ЭтоКредиторскаяЗадолженность = Истина Тогда
        ОбластьМакета.Параметры.ВидЗадолженности2 = "кредиторов";
    Иначе
        ОбластьМакета.Параметры.ВидЗадолженности2 = "дебиторов";
    КонецЕсли;
    ТабличныйДокумент.Вывести(ОбластьМакета);

    // Создаем массив для проверки вывода
    МассивВыводимыхОбластей = Новый Массив;

    // Выводим многострочную часть документа
    ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
    ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщийИтогТаблицы");
    ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");

    ОбластьЗаголовокТаблицы.Параметры.ФорматЗадолженности = ОбщиеДанные.ФорматЗадолженности.Представление;
    Если ЭтоКредиторскаяЗадолженность = Истина Тогда
        ОбластьЗаголовокТаблицы.Параметры.ВидЗадолженности = "кредиторской";
    Иначе
        ОбластьЗаголовокТаблицы.Параметры.ВидЗадолженности = "дебиторской";
    КонецЕсли;

    СтруктураИтогов = Новый Структура("Сумма, ИсходнаяСумма, УчтеннаяСумма, НакопленнаяОшибкаОкругления", 0, 0, 0, 0);
    СтруктураИтогов.ИсходнаяСумма = ДанныеЗаполнения.Итог(
            ?(ЭтоКредиторскаяЗадолженность = Ложь, "СуммаКонечныйОстаток", "СуммаПросрочено"));

    ОбластьСтрокаПрочее = Макет.ПолучитьОбласть("СтрокаТаблицыПрочие");

    КоличествоСтрокДанныхТЧ = ДанныеЗаполнения.Количество();
    НомерСтроки = 0;
    НомерСтрокиДляВывода = 0;
    Для Каждого СтрокаДанныхТЧ Из ДанныеЗаполнения Цикл
        ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
        УточнитьФорматСуммОбластиМакета(ОбластьМакета, ОбщиеДанные.ФорматЗадолженности, Макет);

        НомерСтроки = НомерСтроки + 1;
        НомерСтрокиДляВывода = НомерСтрокиДляВывода + 1;

        СуммаЗадолженностиПоСтроке = 0;

        ОбластьМакета.Параметры.НомерСтроки = НомерСтрокиДляВывода;
        ОбластьМакета.Параметры.Контрагент = СтрокаДанныхТЧ.НаименованиеПолное;
        ОбластьМакета.Параметры.КонтрагентСсылка = СтрокаДанныхТЧ.Контрагент;
        ОбластьМакета.Параметры.ЮрАдрес = СтрокаДанныхТЧ.ПредставлениеАдреса;

        Если ЭтоКредиторскаяЗадолженность = Истина Тогда
            СуммаЗадолженностиПоСтроке = СтрокаДанныхТЧ.СуммаПросрочено;
        Иначе
            СуммаЗадолженностиПоСтроке = СтрокаДанныхТЧ.СуммаКонечныйОстаток;
        КонецЕсли;

        ОбластьМакета.Параметры.Сумма = ПолучитьОкругленнуюСумму(СуммаЗадолженностиПоСтроке, ОбщиеДанные.ФорматЗадолженности);

        // Выделение цветом отрицательных сумм
        Если ОбластьМакета.Параметры.Сумма < 0 Тогда
            ОбластьМакета.Область(1, Макет.Области.Сумма.Лево, 1,
                Макет.Области.Сумма.Право).ЦветТекста = WebЦвета.Красный;
        КонецЕсли;

        НужноВывестиТекущуюСтроку = СуммаЗадолженностиПоСтроке <> 0 И ОбластьМакета.Параметры.Сумма <> 0
            И ГП_РаботаСОтчетами.Абс(СуммаЗадолженностиПоСтроке) > ГП_РаботаСОтчетами.Абс(ОбщиеДанные.ПорогДолга);
        НужноУчестьПогрешностьОкругления = ОбластьМакета.Параметры.Сумма = 0 И СуммаЗадолженностиПоСтроке <> 0
            И ГП_РаботаСОтчетами.Абс(СуммаЗадолженностиПоСтроке) > ГП_РаботаСОтчетами.Абс(ОбщиеДанные.ПорогДолга);
        НужноУчестьПогрешностьОкругления = НужноУчестьПогрешностьОкругления ИЛИ НужноВывестиТекущуюСтроку;

        // Накопление общей суммы итогов (контроль Сумма == ИсходнаяСумма)
        СтруктураИтогов.Сумма = СтруктураИтогов.Сумма + СуммаЗадолженностиПоСтроке;

        Если НомерСтроки = 1 Тогда
            ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
        Иначе
            МассивВыводимыхОбластей.Очистить();
            Если НужноВывестиТекущуюСтроку = Истина Тогда
                МассивВыводимыхОбластей.Добавить(ОбластьМакета);
            КонецЕсли;

            Если НомерСтроки = КоличествоСтрокДанныхТЧ Тогда
                Если ОбластьСтрокаПрочее <> Неопределено Тогда
                    МассивВыводимыхОбластей.Добавить(ОбластьСтрокаПрочее);
                КонецЕсли;
                МассивВыводимыхОбластей.Добавить(ОбластьОбщийИтог);
                МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
            КонецЕсли;

            Если ОбщиеДанные.ДляПечати = Истина Тогда
                Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
                    ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
                    ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;

        Если НужноУчестьПогрешностьОкругления Тогда
            // Накопление ошибок для компенсации ошибок округления
            СтруктураИтогов.НакопленнаяОшибкаОкругления = СтруктураИтогов.НакопленнаяОшибкаОкругления
                + (ОбластьМакета.Параметры.Сумма / ОбщиеДанные.ФорматЗадолженности.Коэффициент - СуммаЗадолженностиПоСтроке);
        КонецЕсли;

        Если НужноВывестиТекущуюСтроку = Истина Тогда
            // Накопление сумм выводимых в отчет
            СтруктураИтогов.УчтеннаяСумма = СтруктураИтогов.УчтеннаяСумма + ОбластьМакета.Параметры.Сумма;

            // Вывод строки в отчет
            ТабличныйДокумент.Вывести(ОбластьМакета);
        Иначе
            НомерСтрокиДляВывода = НомерСтрокиДляВывода - 1;
        КонецЕсли;
    КонецЦикла;

    // Формирование строки прочих задолженностей
    ОбластьСтрокаПрочее = СформироватьСтрокуПрочихЗадолженностей(
            ОбщиеДанные, ДанныеЗаполнения,
            СтруктураИтогов.НакопленнаяОшибкаОкругления,
            ОбластьСтрокаПрочее, Макет);

    #Область Диагностика

    // Проверка общих итогов
    ГП_ДиагностикаКлиентСервер.Утверждение(СтруктураИтогов.Сумма = СтруктураИтогов.ИсходнаяСумма, СтрШаблон(
                "ВНИМАНИЕ! Общие суммы отчета не совпадают, Сумма отчета: %1, Исходная сумма: %2",
                СтруктураИтогов.Сумма, СтруктураИтогов.ИсходнаяСумма));

    #КонецОбласти // Диагностика

    Если ОбластьСтрокаПрочее <> Неопределено Тогда
        ОбластьСтрокаПрочее.Параметры.НомерСтроки = НомерСтрокиДляВывода + 1;
        УточнитьФорматСуммОбластиМакета(ОбластьСтрокаПрочее, ОбщиеДанные.ФорматЗадолженности, Макет);
        ТабличныйДокумент.Вывести(ОбластьСтрокаПрочее);
    КонецЕсли;

    СтруктураИтогов.Сумма = ПолучитьОкругленнуюСумму(СтруктураИтогов.Сумма, ОбщиеДанные.ФорматЗадолженности);
    ОбластьОбщийИтог.Параметры.Заполнить(СтруктураИтогов);
    Если СтруктураИтогов.Сумма < 0 Тогда
        ОбластьОбщийИтог.Область(1, Макет.Области.Сумма.Лево, 1,
            Макет.Области.Сумма.Право).ЦветТекста = WebЦвета.Красный;
    КонецЕсли;
    УточнитьФорматСуммОбластиМакета(ОбластьОбщийИтог, ОбщиеДанные.ФорматЗадолженности, Макет);
    ТабличныйДокумент.Вывести(ОбластьОбщийИтог);

    ОбластьПодвала.Параметры.ГлавныйБухгалтерФИО = ПолучитьФИОПредставителя("ГлавныйБухгалтер", ОбщиеДанные.Организация, ОбщиеДанные.Дата);
    ОбластьПодвала.Параметры.ДиректорФИО = ПолучитьФИОПредставителя("Директор", ОбщиеДанные.Организация, ОбщиеДанные.Дата);
    ТабличныйДокумент.Вывести(ОбластьПодвала);

    Если ПривилегированныйРежим() Тогда
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли;

    Возврат ТабличныйДокумент;
КонецФункции

Функция СформироватьСтрокуПрочихЗадолженностей(
        Знач ОбщиеДанные, Знач ДанныеЗаполнения, Знач НакопленнаяОшибкаОкругления, ОбластьМакета, Знач Макет)

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВЫБОР
        |       КОГДА &ВидЗадолженности = ""Кредиторская""
        |           ТОГДА ДанныеЗаполнения.СуммаПросрочено
        |       ИНАЧЕ ДанныеЗаполнения.СуммаКонечныйОстаток
        |   КОНЕЦ КАК СуммаЗадолженности
        |ПОМЕСТИТЬ ВТ_ОстатокЗадолженности
        |ИЗ
        |   &ДанныеЗаполнения КАК ДанныеЗаполнения
        |ГДЕ
        |   ВЫБОР
        |       КОГДА &ВидЗадолженности = ""Кредиторская""
        |           ТОГДА ДанныеЗаполнения.СуммаПросрочено <= &ПорогДолга И ДанныеЗаполнения.СуммаПросрочено >= -&ПорогДолга
        |       ИНАЧЕ ДанныеЗаполнения.СуммаКонечныйОстаток <= &ПорогДолга И ДанныеЗаполнения.СуммаКонечныйОстаток >= -&ПорогДолга
        |   КОНЕЦ
        |;
        |
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ЕСТЬNULL(СУММА(ВТ_ОстатокЗадолженности.СуммаЗадолженности), 0) КАК СуммаЗадолженности
        |ИЗ
        |   ВТ_ОстатокЗадолженности КАК ВТ_ОстатокЗадолженности
        |";

    Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
    Запрос.УстановитьПараметр("ВидЗадолженности", ОбщиеДанные.ВидЗадолженности);
    Запрос.УстановитьПараметр("ПорогДолга", ОбщиеДанные.ПорогДолга);
    РезультатЗапроса = Запрос.Выполнить();
    ДанныеПоЗадолженности = РезультатЗапроса.Выгрузить();

    СуммаПрочейЗадолженности = 0;
    Если ДанныеПоЗадолженности.Количество() <> 0 Тогда
        СуммаПрочейЗадолженности = ДанныеПоЗадолженности[0].СуммаЗадолженности;
    КонецЕсли;

    СуммаПрочейЗадолженности = СуммаПрочейЗадолженности - НакопленнаяОшибкаОкругления;
    Если СуммаПрочейЗадолженности = 0 Тогда
        Возврат Неопределено;
    КонецЕсли;

    ОбластьМакета.Параметры.Сумма = ПолучитьОкругленнуюСумму(СуммаПрочейЗадолженности, ОбщиеДанные.ФорматЗадолженности);
    Если ОбластьМакета.Параметры.Сумма = 0 Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если ОбластьМакета.Параметры.Сумма < 0 Тогда
        ОбластьМакета.Область(1, Макет.Области.Сумма.Лево, 1,
            Макет.Области.Сумма.Право).ЦветТекста = WebЦвета.Красный;
    КонецЕсли;

    Возврат ОбластьМакета;
КонецФункции

Функция УточнитьФорматСуммОбластиМакета(ОбластьМакета, Знач ФорматСумм, Знач Макет)
    Если ФорматСумм.Разрядность = 0 Тогда
        ОбластьМакета.Область(1, Макет.Области.Сумма.Лево, 1, Макет.Области.Сумма.Право).Формат = "ЧДЦ=0";
        Возврат Истина;
    КонецЕсли;

    Возврат Ложь;
КонецФункции

// Параметры:
//  ФорматЗадолженности - Число
// Возвращаемое значение:
//  Структура
//      * Представление - Строка
//      * Коэффициент - Число
//      * Значение - ПеречислениеСсылка.ПорядкиОкругленияОтчетности
Функция ПолучитьДанныеФорматаЗадолженности(Знач ФорматЗадолженности)
    РезультатФункции = Новый Структура("Представление, Коэффициент, ПорядкиОкругления, Разрядность, РежимОкругления, ОтбрасыватьДробнуюЧасть",
            "руб.", 1, Перечисления.ПорядкиОкругленияОтчетности.Окр1, 2, РежимОкругления.Окр15как20, Ложь);

    Если ФорматЗадолженности = 0 Тогда
        Возврат РезультатФункции;
    ИначеЕсли ФорматЗадолженности = 1 Тогда
        РезультатФункции.Представление = "тыс. руб.";
        РезультатФункции.Коэффициент = 1 / 1000;
        РезультатФункции.ПорядкиОкругления = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
        РезультатФункции.Разрядность = 0;
        РезультатФункции.РежимОкругления = РежимОкругления.Окр15как20;
        РезультатФункции.ОтбрасыватьДробнуюЧасть = Ложь;
        Возврат РезультатФункции;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Устарела. Будет удалена, Использовать - `ГП_РаботаСОтчетами.ПолучитьПараметрПоНаименованию`
//  или `БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр`
//
// Параметры:
//  Наименование - Строка
Функция Удалить_ПолучитьПараметрПоНаименованию(Знач Наименование)
    Возврат ГП_РаботаСОтчетами.ПолучитьПараметрПоНаименованию(ЭтотОбъект, Наименование, Ложь);
КонецФункции

// Устарела. Не использовать. Будет удалена
//
// Параметры:
//  Наименование - Строка
//  ЗначениеПоУмолчанию - Произвольный
//  ТолькоИспользуемый - Булево
// Возвращаемое значение:
//  Произвольный, Неопределено
Функция Удалить_ПолучитьЗначениеПараметраПоНаименованию(
        Знач Наименование, Знач ЗначениеПоУмолчанию = Неопределено, Знач ТолькоИспользуемый = Истина)

    НайденныйПараметр = Удалить_ПолучитьПараметрПоНаименованию(Наименование);
    Если НайденныйПараметр = Неопределено Тогда
        Возврат ЗначениеПоУмолчанию;
    КонецЕсли;

    Если ТолькоИспользуемый = Истина И НайденныйПараметр.Использование = Ложь Тогда
        Возврат ЗначениеПоУмолчанию;
    Иначе
        Возврат НайденныйПараметр.Значение;
    КонецЕсли;
КонецФункции

// Параметры:
//  Сумма - Число
//  ФорматЗадолженности - Структура
//      * Коэффициент - Число
//      * Разрядность - Число
//      * РежимОкругления - ПеречислениеСсылка.РежимыОкругления
//      * ОтбрасыватьДробнуюЧасть - Булево
// Возвращаемое значение:
//  - Число
Функция ПолучитьОкругленнуюСумму(Знач Сумма, Знач ФорматЗадолженности)
    РезультатФункции = ?(ФорматЗадолженности.Коэффициент = 1, Сумма, Сумма * ФорматЗадолженности.Коэффициент);

    Если ФорматЗадолженности.ОтбрасыватьДробнуюЧасть = Ложь Тогда
        РезультатФункции = Окр(РезультатФункции, ФорматЗадолженности.Разрядность, ФорматЗадолженности.РежимОкругления);
    Иначе
        РезультатФункции = Цел(РезультатФункции);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности --
