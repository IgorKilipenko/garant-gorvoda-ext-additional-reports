// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности ++
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    ИнициализироватьПараметры();

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(),
            ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ДанныеЗаполнения = Новый ТаблицаЗначений;
    ДанныеЗаполнения = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    // Подготовка общих данных отчета
    ЗначениеПараметраОрганизация = ПолучитьЗначениеПараметраПоНаименованию("Организация", Неопределено, Ложь);
    ЗначениеПараметраПериод = ПолучитьЗначениеПараметраПоНаименованию("Период", ТекущаяДатаСеанса());
    ЗначениеПараметраФорматЗадолженности = ПолучитьЗначениеПараметраПоНаименованию("ФорматЗадолженности", 0);
    ЗначениеПараметраДляПечати = ПолучитьЗначениеПараметраПоНаименованию("ДляПечати", Ложь);
    ОбщиеДанныеОтчета = Новый Структура("Дата, Организация, ФорматЗадолженности, ДляПечати",
            ЗначениеПараметраПериод,
            ЗначениеПараметраОрганизация,
            ПолучитьДанныеФорматаЗадолженности(ЗначениеПараметраФорматЗадолженности),
            ЗначениеПараметраДляПечати);

    // Формирование табличного документа
    ДокументРезультат = СформироватьТабличныйДокумент(
            ОбщиеДанныеОтчета, ДанныеЗаполнения, ДокументРезультат);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности --

// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности ++
#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();

    ОрганизацияПоУмолчанию = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "Организация", ОрганизацияПоУмолчанию);

    // Заполняем параметр ВидыСубконто
    ВидыСубконто = Новый СписокЗначений;
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидыСубконто", ВидыСубконто);

    // Заполняем параметр ФильтрСписокСчетов
    ФильтрСписокСчетов = ПолучитьСчета();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ФильтрСписокСчетов", ФильтрСписокСчетов);
КонецПроцедуры

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("Период", Дата(1, 1, 1));

    ПараметрПериодОтчета =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Период");

    РезультатФункции.Период = КонецДня(ПараметрПериодОтчета.Значение);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Период", РезультатФункции.Период);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ПериодГраница", Новый Граница(РезультатФункции.Период, ВидГраницы.Включая));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
// Структура:
//  СписокЗначений из ПланСчетовСсылка.Хозрасчетный
Функция ПолучитьСчета()
    РезультатФункции = Новый СписокЗначений;

    РезультатФункции.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
    РезультатФункции.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТабличныйДокумент
Функция ПолучитьМакетаАктаОСВПоАбоненту()
    Возврат Отчеты.ГП_ОтчетПоДебиторам.ПолучитьМакет("ПФ_MXL_Макет");
КонецФункции

// Параметры:
//  Должность - Строка
//  Организация - СправочникСсылка.Организации
//  ДатаАктуальности - Дата
// Возвращаемое значение:
//  - Строка
Функция ПолучитьФИОПредставителя(Знач Должность, Знач Организация, Знач ДатаАктуальности)
    РезультатФункции = "";

    ОтветственныеЛицаОрганизации = ОтветственныеЛицаБППовтИсп.ОтветственныеЛица(Организация, ДатаАктуальности);

    ИмяПоляПредставления = Должность + "ФИО";
    Если ОтветственныеЛицаОрганизации.Свойство(ИмяПоляПредставления) Тогда
        РезультатФункции = ОтветственныеЛицаОрганизации[ИмяПоляПредставления].Представление;
    КонецЕсли;

    Если ПустаяСтрока(РезультатФункции) Тогда
        Если Должность = "ГлавныйБухгалтер" Тогда
            РезультатФункции = "Антипова О.А.";
        ИначеЕсли Должность = "Директор" Тогда
            РезультатФункции = "Машошин О.Л.";
        КонецЕсли;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ОбщиеДанные - Структура
//  ДанныеЗаполнения - ТаблицаЗначений
//  ТабличныйДокумент - ТабличныйДокумент
// Возвращаемое значение:
//  - ТабличныйДокумент
Функция СформироватьТабличныйДокумент(Знач ОбщиеДанные, Знач ДанныеЗаполнения, ТабличныйДокумент)
    Макет = ?(Макет = Неопределено, ПолучитьМакетаАктаОСВПоАбоненту(), Макет);

    УстановитьПривилегированныйРежим(Истина);

    ТабличныйДокумент = ?(ТабличныйДокумент = Неопределено, Новый ТабличныйДокумент, ТабличныйДокумент);
    ТабличныйДокумент.ПолеСлева = 5;
    ТабличныйДокумент.ПолеСправа = 5;
    ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
    ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
    ТабличныйДокумент.АвтоМасштаб = Истина;
    ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
    ТабличныйДокумент.ТолькоПросмотр = Истина;

    ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГП_ОтчетПоДебиторам_ОтчетПоДебиторам";

    Если ДанныеЗаполнения.Количество() = 0 Тогда
        // Документ без данных
        ОбщегоНазначения.СообщитьПользователю("Данные отсутствуют");
        Возврат ТабличныйДокумент;
    КонецЕсли;

    // Общие реквизиты шапки
    ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

    // Данные участников
    СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
            ОбщиеДанные.Организация, ОбщиеДанные.Дата);

    ОбластьМакета.Параметры.Дата = Формат(ОбщиеДанные.Дата, "ДФ='дд ММММ гггг'") + " г.";
    ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
    ТабличныйДокумент.Вывести(ОбластьМакета);

    // Создаем массив для проверки вывода
    МассивВыводимыхОбластей = Новый Массив;

    // Выводим многострочную часть документа
    ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
    ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщийИтогТаблицы");
    ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");

    СтруктураИтогов = Новый Структура("Сумма, СуммаПросрочено", 0, 0);

    КоличествоСтрокДанныхТЧ = ДанныеЗаполнения.Количество();
    НомерСтроки = 0;
    Для Каждого СтрокаДанныхТЧ Из ДанныеЗаполнения Цикл
        ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");

        НомерСтроки = НомерСтроки + 1;
        
        ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
        ОбластьМакета.Параметры.Контрагент = СтрокаДанныхТЧ.НаименованиеПолное;
        ОбластьМакета.Параметры.КонтрагентСсылка = СтрокаДанныхТЧ.Контрагент;
        ОбластьМакета.Параметры.ЮрАдрес = СтрокаДанныхТЧ.ПредставлениеАдреса;
        ОбластьМакета.Параметры.РасчетныйСчет = СтрокаДанныхТЧ.НомерСчета;
        ОбластьМакета.Параметры.РасчетныйСчетСсылка = СтрокаДанныхТЧ.Счет;
        ОбластьМакета.Параметры.Сумма = ПолучитьПредставлениеСуммы(СтрокаДанныхТЧ.СуммаКонечныйОстаток, ОбщиеДанные.ФорматЗадолженности);
        ОбластьМакета.Параметры.СуммаПросрочено =
            ПолучитьПредставлениеСуммы(СтрокаДанныхТЧ.СуммаПросрочено, ОбщиеДанные.ФорматЗадолженности);
        ОбластьМакета.Параметры.ПредставлениеБанка = СтрокаДанныхТЧ.ПредставлениеАдресаБанка;
        ОбластьМакета.Параметры.БанкСсылка = СтрокаДанныхТЧ.Банк;
        ОбластьМакета.Параметры.НомерКорСчета = СтрокаДанныхТЧ.КоррСчетБанка;

        СтруктураИтогов.Сумма = СтруктураИтогов.Сумма + СтрокаДанныхТЧ.СуммаКонечныйОстаток;
        СтруктураИтогов.СуммаПросрочено = СтруктураИтогов.СуммаПросрочено + СтрокаДанныхТЧ.СуммаПросрочено;

        Если НомерСтроки = 1 Тогда
            ОбластьЗаголовокТаблицы.Параметры.ФорматЗадолженности = ОбщиеДанные.ФорматЗадолженности.Представление;
            ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
        Иначе
            МассивВыводимыхОбластей.Очистить();
            МассивВыводимыхОбластей.Добавить(ОбластьМакета);
            Если НомерСтроки = КоличествоСтрокДанныхТЧ Тогда
                МассивВыводимыхОбластей.Добавить(ОбластьОбщийИтог);
                МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
            КонецЕсли;
            Если ОбщиеДанные.ДляПечати = Истина Тогда
                Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
                    ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
                    ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;

        ТабличныйДокумент.Вывести(ОбластьМакета);

    КонецЦикла;

    СтруктураИтогов.Сумма = ПолучитьПредставлениеСуммы(СтруктураИтогов.Сумма, ОбщиеДанные.ФорматЗадолженности);
    СтруктураИтогов.СуммаПросрочено = ПолучитьПредставлениеСуммы(СтруктураИтогов.СуммаПросрочено, ОбщиеДанные.ФорматЗадолженности);
    ОбластьОбщийИтог.Параметры.Заполнить(СтруктураИтогов);
    ТабличныйДокумент.Вывести(ОбластьОбщийИтог);

    ОбластьПодвала.Параметры.ГлавныйБухгалтерФИО = ПолучитьФИОПредставителя("ГлавныйБухгалтер", ОбщиеДанные.Организация, ОбщиеДанные.Дата);
    ОбластьПодвала.Параметры.ДиректорФИО = ПолучитьФИОПредставителя("Директор", ОбщиеДанные.Организация, ОбщиеДанные.Дата);
    ТабличныйДокумент.Вывести(ОбластьПодвала);

    Если ПривилегированныйРежим() Тогда
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли;

    Возврат ТабличныйДокумент;
КонецФункции

// Параметры:
//  ФорматЗадолженности - Число
// Возвращаемое значение:
//  Структура
//      * Представление - Строка
//      * Коэффициент - Число
//      * Значение - ПеречислениеСсылка.ПорядкиОкругленияОтчетности
Функция ПолучитьДанныеФорматаЗадолженности(Знач ФорматЗадолженности)
    РезультатФункции = Новый Структура("Представление, Коэффициент, Значение", "руб.", 1, Перечисления.ПорядкиОкругленияОтчетности.Окр1);

    Если ФорматЗадолженности = 0 Тогда
        Возврат РезультатФункции;
    ИначеЕсли ФорматЗадолженности = 1 Тогда
        РезультатФункции.Представление = "тыс. руб.";
        РезультатФункции.Коэффициент = 1 / 1000;
        РезультатФункции.Значение = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
        Возврат РезультатФункции;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Наименование - Строка
Функция ПолучитьПараметрПоНаименованию(Знач Наименование)
    РезультатФункции = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, Наименование);
    Если РезультатФункции = Неопределено Тогда
        РезультатФункции = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
                ЭтотОбъект.КомпоновщикНастроек.Настройки, Наименование);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Наименование - Строка
//  ЗначениеПоУмолчанию - Произвольный
//  ТолькоИспользуемый - Булево
// Возвращаемое значение:
//  Произвольный, Неопределено
Функция ПолучитьЗначениеПараметраПоНаименованию(
        Знач Наименование, Знач ЗначениеПоУмолчанию = Неопределено, Знач ТолькоИспользуемый = Истина)

    НайденныйПараметр = ПолучитьПараметрПоНаименованию(Наименование);
    Если НайденныйПараметр = Неопределено Тогда
        Возврат ЗначениеПоУмолчанию;
    КонецЕсли;

    Если ТолькоИспользуемый = Истина И НайденныйПараметр.Использование = Ложь Тогда
        Возврат ЗначениеПоУмолчанию;
    Иначе
        Возврат НайденныйПараметр.Значение;
    КонецЕсли;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ПолучитьПредставлениеСуммы(Знач Сумма, Знач ФорматЗадолженности)
    КоэффициентПересчета = ФорматЗадолженности.Коэффициент;
    РазрядностьПредставления = 2;

    Возврат Окр(Сумма * ФорматЗадолженности.Коэффициент, РазрядностьПредставления, 1);
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 31.10.2024 [F00230258] Отчет по дебиторской задолженности --
