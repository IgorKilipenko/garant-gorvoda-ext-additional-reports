#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    АналитикаРасчетов = Новый СписокЗначений;
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "АналитикаРасчетов", АналитикаРасчетов);

    СчетаНДСПоАренде = ПолучитьСчетаНДСПоАренднымОбязательствам();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "СчетаНДСПоАренде", СчетаНДСПоАренде);

    ФильтрСписокСчетов = ПолучитьСчетаУчетаВзаиморасчетов();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);

    ПараметрФильтрСписокСчетов =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов");
    Если ПараметрФильтрСписокСчетов <> Неопределено
                И (ПараметрФильтрСписокСчетов.Значение = Неопределено
                    ИЛИ ПараметрФильтрСписокСчетов.Значение.Количество() = 0) Тогда
        БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);
    КонецЕсли;

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(),
            ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ДанныеЗаполнения = Новый ТаблицаЗначений;
    ДанныеЗаполнения = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    // Формирование общих данных
    ПараметрПериодОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ПериодОтчета");
    ПараметрОрганизация = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Организация");
    ПараметрМассивКонтрагентов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "МассивКонтрагентов");

    ДанныеЗаполненияШапки = Новый Структура;
    ДанныеЗаполненияШапки.Вставить("ДатаНачала", ПараметрПериодОтчета.Значение.ДатаНачала);
    ДанныеЗаполненияШапки.Вставить("ДатаОкончания", ПараметрПериодОтчета.Значение.ДатаОкончания);
    ДанныеЗаполненияШапки.Вставить("ДатаАктаСверки", ТекущаяДатаСеанса());
    ДанныеЗаполненияШапки.Вставить("Организация", ПараметрОрганизация.Значение);
    Если ТипЗнч(ПараметрМассивКонтрагентов.Значение) = Тип("СписокЗначений") Тогда
        ДанныеЗаполненияШапки.Вставить("Контрагент",
            ?(ПараметрМассивКонтрагентов.Значение.Количество() > 0,
                ПараметрМассивКонтрагентов.Значение[0],
                Справочники.Контрагенты.ПустаяСсылка));
    Иначе
        ДанныеЗаполненияШапки.Вставить("Контрагент", ПараметрМассивКонтрагентов.Значение);
    КонецЕсли;

    ДокументРезультат = Отчеты.ГП_ОСВПоАбоненту.СформироватьТабличныйДокументАктаОСВПоАбонентуПоДаннымЗаполнения(
        ДанныеЗаполнения, ДанныеЗаполненияШапки, ДокументРезультат);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСчетаИсключения()
	СчетаИсключения = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаИсключения, ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам());
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);

    РезультатФункции = Новый СписокЗначений;
    РезультатФункции.ЗагрузитьЗначения(СчетаИсключения);

	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСчетаНДСПоАренднымОбязательствам()
    РезультатФункции = Новый СписокЗначений;

    МассивСчетовНДСАрнелы = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();

    РезультатФункции.ЗагрузитьЗначения(МассивСчетовНДСАрнелы);
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСчетаУчетаВзаиморасчетов()
    РезультатФункции = Новый СписокЗначений;

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);

    Для каждого СтрокаСчета Из ТаблицаСчетов Цикл
    	РезультатФункции.Добавить(СтрокаСчета.СчетРасчетов);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
