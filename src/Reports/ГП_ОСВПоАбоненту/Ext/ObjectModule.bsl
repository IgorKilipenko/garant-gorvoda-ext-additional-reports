// Гарант+ Килипенко 24.10.2024 [F00229978] Отчет ОСВ по абоненту ++
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    ИнициализироватьПараметры();
    
    // ОсновнойНаборДанных = ПолучитьОсновнойНаборДанных();
    // ОсновнойНаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(),
            ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ДанныеЗаполнения = Новый ТаблицаЗначений;
    ДанныеЗаполнения = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

    ПараметрКонтрагент = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Контрагент");

    // Формирование общих данных
    ПараметрПериодОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ПериодОтчета");
    ПараметрОрганизация = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Организация");
    ПараметрДляПечати = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ДляПечати");

    ДанныеЗаполненияШапки = Новый Структура;
    ДанныеЗаполненияШапки.Вставить("ДатаНачала", ПараметрПериодОтчета.Значение.ДатаНачала);
    ДанныеЗаполненияШапки.Вставить("ДатаОкончания", ПараметрПериодОтчета.Значение.ДатаОкончания);
    ДанныеЗаполненияШапки.Вставить("ДатаАктаСверки", ТекущаяДатаСеанса());
    ДанныеЗаполненияШапки.Вставить("Организация", ПараметрОрганизация.Значение);
    ДанныеЗаполненияШапки.Вставить("Контрагент", ПараметрКонтрагент.Значение);
    ДанныеЗаполненияШапки.Вставить("ДляПечати", ПараметрДляПечати.Значение);
    
    // Подготовка данных
    ДанныеЗаполнения.Свернуть("Дата, Документ, Счетфактура, ОстатокНаНачалоДт, ОстатокНаНачалоКт, ОборотДт, ОборотКт, ОстатокНаКонецДт, ОстатокНаКонецКт", "Дебет, Кредит");

    ДокументРезультат = Отчеты.ГП_ОСВПоАбоненту.СформироватьТабличныйДокументАктаОСВПоАбонентуПоДаннымЗаполнения(
        ДанныеЗаполнения, ДанныеЗаполненияШапки, ДокументРезультат);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// Гарант+ Килипенко 24.10.2024 [F00229978] Отчет ОСВ по абоненту --

// Гарант+ Килипенко 24.10.2024 [F00229978] Отчет ОСВ по абоненту ++
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСчетаИсключения()
	СчетаИсключения = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаИсключения, ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам());
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);

    РезультатФункции = Новый СписокЗначений;
    РезультатФункции.ЗагрузитьЗначения(СчетаИсключения);

	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСчетаНДСПоАренднымОбязательствам()
    РезультатФункции = Новый СписокЗначений;

    МассивСчетовНДСАрнелы = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();

    РезультатФункции.ЗагрузитьЗначения(МассивСчетовНДСАрнелы);
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьСчетаУчетаВзаиморасчетов()
    РезультатФункции = Новый СписокЗначений;

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);

    Для каждого СтрокаСчета Из ТаблицаСчетов Цикл
    	РезультатФункции.Добавить(СтрокаСчета.СчетРасчетов);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

//Функция ИсключитьУсловиеФильтрацииДоговоровИзЗапроса(Знач ТекстЗапроса)
//    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Субконто2 В (&МассивДоговоров)", "");
//    Возврат ТекстЗапроса;
//КонецФункции

Функция ПолучитьОсновнойНаборДанных()
    Возврат ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
КонецФункции

Процедура ИнициализироватьПараметры()
    // Установка границ периода отчета
    УточнитьПараметрыПериодаОтчета();

    // Заполняем параметр АналитикаРасчетов
    АналитикаРасчетов = Новый СписокЗначений;
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "АналитикаРасчетов", АналитикаРасчетов);

    // Заполняем параметр СчетаНДСПоАренде
    СчетаНДСПоАренде = ПолучитьСчетаНДСПоАренднымОбязательствам();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "СчетаНДСПоАренде", СчетаНДСПоАренде);

    // Заполняем параметр ФильтрСписокСчетов
    ФильтрСписокСчетов = ПолучитьСчетаУчетаВзаиморасчетов();
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);

    ПараметрФильтрСписокСчетов =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов");
    Если ПараметрФильтрСписокСчетов <> Неопределено
                И (ПараметрФильтрСписокСчетов.Значение = Неопределено
                    ИЛИ (ТипЗнч(ПараметрФильтрСписокСчетов.Значение) = Тип("СписокЗначений") И ПараметрФильтрСписокСчетов.Значение.Количество() = 0)) Тогда
        БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ФильтрСписокСчетов", ФильтрСписокСчетов);
    КонецЕсли;

    // Заполняем параметр Контрагент
    ПараметрМассивКонтрагентов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "МассивКонтрагентов");

    ПараметрКонтрагент = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Контрагент");

    МассивКонтрагентов = Новый СписокЗначений;
    МассивКонтрагентов.Добавить(ПараметрКонтрагент.Значение);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, ПараметрМассивКонтрагентов.Параметр, МассивКонтрагентов);
КонецПроцедуры

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), Дата(1, 1, 1));

    ПараметрПериодОтчета =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек, "ПериодОтчета");

    РезультатФункции.НачалоПериода = НачалоДня(ПараметрПериодОтчета.Значение.ДатаНачала);
    РезультатФункции.КонецПериода = КонецДня(ПараметрПериодОтчета.Значение.ДатаОкончания);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "НачалоПериода", РезультатФункции.НачалоПериода);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "КонецПериода", РезультатФункции.КонецПериода);

    РезультатФункции.НачалоПериода = Новый Граница(ПараметрПериодОтчета.Значение.ДатаНачала, ВидГраницы.Включая);
    РезультатФункции.КонецПериода = Новый Граница(ПараметрПериодОтчета.Значение.ДатаОкончания, ВидГраницы.Включая);
    
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "НачалоПериодаВключая", РезультатФункции.НачалоПериода);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "КонецПериодаВключая", РезультатФункции.КонецПериода);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.10.2024 [F00229978] Отчет ОСВ по абоненту --
