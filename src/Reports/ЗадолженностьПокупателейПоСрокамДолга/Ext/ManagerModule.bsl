// Гарант+ Килипенко 24.01.2025 [F00233774] Добавление отборов дтн. показателей ++
#Область ПереопределениеСтандартногоФункционала

&Вместо("ПолучитьТекстЗапроса")
Функция ГП_ПолучитьТекстЗапроса(КоличествоИнтервалов)
    ИсходныйТекстЗапроса = ПродолжитьВызов(КоличествоИнтервалов);

    ТекстЗапросаФильтрПоДинПоказателям =
        "////////////////////////////////////////////////////////////////////////////////
        |// Гарант+ Килипенко 23.01.2024 Отборы по динамическим показателям л/с ++
        |// #ВСТАВКА
        |////////////////////////////////////////////////////////////////////////////////
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |    СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет КАК ЛицевойСчет,
        |    СведенияДляВзаиморасчетовПоЛС.Контрагент КАК Контрагент,
        |    ДинамическиеПоказателиЛицевыхСчетов.Водозабор КАК Водозабор,
        |    ДинамическиеПоказателиЛицевыхСчетов.Контролер КАК Контролер,
        |    ДинамическиеПоказателиЛицевыхСчетов.Финансирование КАК СпособФинансирования,
        |    ДинамическиеПоказателиЛицевыхСчетов.ВидПотребления КАК ГруппаПотребителей,
        |    ДинамическиеПоказателиЛицевыхСчетов.Характеристика КАК ХарактеристикаОбъекта
        |{ВЫБРАТЬ
        |	ЛицевойСчет.*,
        |	Контрагент.*,
        |	Водозабор.*,
        |	Контролер.*,
        |	СпособФинансирования.*,
        |	ГруппаПотребителей.*,
        |	ХарактеристикаОбъекта.*}
        |ПОМЕСТИТЬ ВТ_ДинамическиеПоказателиЛС
        |ИЗ
        |    РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Период) КАК СведенияДляВзаиморасчетовПоЛС
        |    ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.lc_ДинамическиеПоказателиЛицевыхСчетов.СрезПоследних(&Период) КАК ДинамическиеПоказателиЛицевыхСчетов
        |    ПО СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет = ДинамическиеПоказателиЛицевыхСчетов.ЛицевойСчет
        |{ГДЕ
        |    ДинамическиеПоказателиЛицевыхСчетов.ЛицевойСчет.*,
        |    ДинамическиеПоказателиЛицевыхСчетов.Водозабор.*,
        |    ДинамическиеПоказателиЛицевыхСчетов.Контролер.*,
        |    ДинамическиеПоказателиЛицевыхСчетов.Финансирование.* КАК СпособФинансирования,
        |    ДинамическиеПоказателиЛицевыхСчетов.Характеристика.* КАК ХарактеристикаОбъекта,
        |    ДинамическиеПоказателиЛицевыхСчетов.ВидПотребления.* КАК ГруппаПотребителей
        |}
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |    Контрагенты.Ссылка КАК Контрагент
        |ПОМЕСТИТЬ ВТ_ФильтрДинамическихПоказателейКонтрагентов
        |ИЗ
        |    Справочник.Контрагенты КАК Контрагенты
        |    ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДинамическиеПоказателиЛС КАК ВТ_ДинамическиеПоказателиЛС
        |    ПО Контрагенты.Ссылка = ВТ_ДинамическиеПоказателиЛС.Контрагент
        |{ГДЕ
        |    ВТ_ДинамическиеПоказателиЛС.ЛицевойСчет.*,
        |    ВТ_ДинамическиеПоказателиЛС.Водозабор.*,
        |    ВТ_ДинамическиеПоказателиЛС.Контролер.*,
        |    ВТ_ДинамическиеПоказателиЛС.СпособФинансирования.*,
        |    ВТ_ДинамическиеПоказателиЛС.ХарактеристикаОбъекта.*,
        |    ВТ_ДинамическиеПоказателиЛС.ГруппаПотребителей.*
        |}
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Гарант+ Килипенко 23.01.2024 Отборы по динамическим показателям л/с --
        |// #КОНЕЦ_ВСТАВКИ
        |///////////////////////////////////////////////////////////////////////////////
        |";

    РезультатФункции = ТекстЗапросаФильтрПоДинПоказателям + Символы.ПС + ИсходныйТекстЗапроса;

    ТекстДополненияЗапроса =
        "////////////////////////////////////////////////////////////////////////////////
        |// Гарант+ Килипенко 23.01.2024 Отборы по динамическим показателям л/с ++
        |// #ВСТАВКА
        |////////////////////////////////////////////////////////////////////////////////
        |
        |ГДЕ
        |   ОстаткиПоПериодам.Контрагент В (ВЫБРАТЬ Т.Контрагент ИЗ ВТ_ФильтрДинамическихПоказателейКонтрагентов КАК Т)
        |
        |////////////////////////////////////////////////////////////////////////////////
        |// Гарант+ Килипенко 23.01.2024 Отборы по динамическим показателям л/с --
        |// #КОНЕЦ_ВСТАВКИ
        |///////////////////////////////////////////////////////////////////////////////
        |";

    ИсходнаяСтрокаВставки = "ОстаткиПоПериодам КАК ОстаткиПоПериодам";
    РезультатФункции = СтрЗаменить(РезультатФункции, ИсходнаяСтрокаВставки, ИсходнаяСтрокаВставки + Символы.ПС + ТекстДополненияЗапроса);

    Возврат РезультатФункции;
КонецФункции

&ИзменениеИКонтроль("ЗаполнитьПоляВСоответствииСоСпискомИнтервалов")
Процедура ГП_ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	КоличествоПолейПериодов = Схема.НаборыДанных.ОсновнойНабор.Поля.Количество() - 5;
	Для Индекс = 1 По КоличествоПолейПериодов Цикл
		ПолеДляУдаления = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти("ОстатокПериода" + Индекс);
		Если ПолеДляУдаления <> Неопределено Тогда
			Схема.НаборыДанных.ОсновнойНабор.Поля.Удалить(ПолеДляУдаления);
		КонецЕсли;
	КонецЦикла;
	
	Схема.ПоляИтога.Очистить();
	
	ИменаИтоговыхГруппировок = ИменаИтоговыхГруппировок(ПараметрыОтчета);

	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ДатаОтгрузки";
	ПолеИтога.Выражение   = "Минимум(ДатаОтгрузки)";
	Для Каждого ИмяГруппировки Из ИменаИтоговыхГруппировок Цикл
		ПолеИтога.Группировки.Добавить(ИмяГруппировки);
	КонецЦикла;
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "СрокОплаты";
	ПолеИтога.Выражение   = "Минимум(СрокОплаты)";
	Для Каждого ИмяГруппировки Из ИменаИтоговыхГруппировок Цикл
		ПолеИтога.Группировки.Добавить(ИмяГруппировки);
	КонецЦикла;

	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ОстатокДолга";
	ПолеИтога.Выражение   = "Сумма(ОстатокДолга)";
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ПросроченнаяЗадолженность";
	ПолеИтога.Выражение   = "Сумма(ПросроченнаяЗадолженность)";
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ДнейПросрочки";
	ПолеИтога.Выражение = "Максимум(ДнейПросрочки)";
	Для Каждого ИмяГруппировки Из ИменаИтоговыхГруппировок Цикл
		ПолеИтога.Группировки.Добавить(ИмяГруппировки);
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ДатаОтгрузки");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "СрокОплаты");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОстатокДолга");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПросроченнаяЗадолженность");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ДнейПросрочки");
	
	ПапкаСПолями = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПапкаСПолями.Заголовок = НСтр("ru = 'Общая задолженность по срокам долга'");
	Индекс = 1;
	ЗначениеПоследнего = 0;
	ОкруглятьДоТысяч = Неопределено;
	НеОкруглять = Неопределено;
	Для Каждого ЭлементУсловногоОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если БыстрыеНастройкиОтчетовСервер.ЭтоНастройкаОкруглятьДоТысяч(ЭлементУсловногоОформления.Представление) Тогда
			
			ОкруглятьДоТысяч = ЭлементУсловногоОформления;
			ОкруглятьДоТысяч.Поля.Элементы.Очистить();
			
			ПолеОкруглятьДоТысяч = ОкруглятьДоТысяч.Поля.Элементы.Добавить();
			ПолеОкруглятьДоТысяч.Поле = Новый ПолеКомпоновкиДанных("ОстатокДолга");
			
			ПолеОкруглятьДоТысяч = ОкруглятьДоТысяч.Поля.Элементы.Добавить();
			ПолеОкруглятьДоТысяч.Поле = Новый ПолеКомпоновкиДанных("ПросроченнаяЗадолженность");
			
		ИначеЕсли БыстрыеНастройкиОтчетовСервер.ЭтоНастройкаНеОкруглять(ЭлементУсловногоОформления.Представление) Тогда
			
			НеОкруглять = ЭлементУсловногоОформления;
			НеОкруглять.Поля.Элементы.Очистить();
			
			ПолеНеОкруглять = НеОкруглять.Поля.Элементы.Добавить();
			ПолеНеОкруглять.Поле = Новый ПолеКомпоновкиДанных("ОстатокДолга");
			
			ПолеНеОкруглять = НеОкруглять.Поля.Элементы.Добавить();
			ПолеНеОкруглять.Поле = Новый ПолеКомпоновкиДанных("ПросроченнаяЗадолженность");
			
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Интервал Из ПараметрыОтчета.Интервалы Цикл
		
		ИмяПоля = "ОстатокПериода" + Индекс;
		Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти(ИмяПоля);
		
		Если ОкруглятьДоТысяч <> Неопределено Тогда
			ПолеОкруглятьДоТысяч = ОкруглятьДоТысяч.Поля.Элементы.Добавить();
			ПолеОкруглятьДоТысяч.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		
		Если НеОкруглять <> Неопределено Тогда
			ПолеНеОкруглять = НеОкруглять.Поля.Элементы.Добавить();
			ПолеНеОкруглять.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		
		Если Поле = Неопределено Тогда
			Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		КонецЕсли;
		Поле.Поле        = ИмяПоля;
		Поле.ПутьКДанным = ИмяПоля;
		Поле.Заголовок   = Интервал.Представление;
		Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
		Поле.ОграничениеИспользования.Группировка = Ложь;
		Поле.ОграничениеИспользованияРеквизитов.Группировка = Ложь;
		
		ПолеИтога = Схема.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоля;
		ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля); 
		
		Индекс = Индекс + 1;
		ЗначениеПоследнего = Интервал.Значение;
	КонецЦикла;
	
	ИмяПоля = "ОстатокПериода" + Индекс;
	Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти(ИмяПоля);
    #Вставка // Гарант+ Килипенко 15.04.2025 Округление до тыс. в последнем интервале ++ {
    Если ОкруглятьДоТысяч <> Неопределено Тогда
        ПолеОкруглятьДоТысяч = ОкруглятьДоТысяч.Поля.Элементы.Добавить();
        ПолеОкруглятьДоТысяч.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
    КонецЕсли;
    
    Если НеОкруглять <> Неопределено Тогда
        ПолеНеОкруглять = НеОкруглять.Поля.Элементы.Добавить();
        ПолеНеОкруглять.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
    КонецЕсли;
    #КонецВставки // Гарант+ Килипенко 15.04.2025 Округление до тыс. в последнем интервале -- }
	Если Поле = Неопределено Тогда
		Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	КонецЕсли;
	Поле.Поле        = ИмяПоля;
	Поле.ПутьКДанным = ИмяПоля;	
	Поле.Заголовок   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Свыше %1 дней'"), ЗначениеПоследнего);
	Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля);
	
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ЭлементСтруктуры.Выбор.Элементы.Очистить();
			Для Каждого ВыбранноеПоле Из ПапкаСПолями.Элементы Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, ВыбранноеПоле.Поле);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПереопределениеСтандартногоФункционала
// Гарант+ Килипенко 24.01.2025 [F00233774] Добавление отборов дтн. показателей --
