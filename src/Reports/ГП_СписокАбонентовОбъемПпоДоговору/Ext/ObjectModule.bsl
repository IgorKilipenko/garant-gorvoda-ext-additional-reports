// ->>> Гарант+ Килипенко
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    // Инициализация параметров
    ИнициализироватьПараметры();

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;

    ВнешнийНаборДанных = ПолучитьВнешниеНаборыДанных();
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий
// <<<- Гарант+ Килипенко

// ->>> Гарант+ Килипенко
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОсновнойНаборДанных()
    Возврат ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
КонецФункции

Процедура ИнициализироватьПараметры()
    // Уточнение периода отчета
    УточнитьПараметрыПериодаОтчета();

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ВидОтчета", "недоплаты и переплаты");

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидыПлощадейОбщаяПлощадь", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Льгота", Ложь);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Перерасчет", Ложь);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "ПовышающийКоэффициент", Ложь);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Пени", Ложь);
    
    // Услуги
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидУслугиХВС", ГП_РаботаСУслугами.ПолучитьВидУслугиХолодноеВодоснабжение().Ссылка);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидУслугиГВС", ГП_РаботаСУслугами.ПолучитьВидУслугиГорячееВодоснабжение().Ссылка);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидУслугиВодоотведение", ГП_РаботаСУслугами.ПолучитьВидУслугиВодоотведение().Ссылка);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки, "ВидУслугиНегативноеВоздействие",
        ГП_РаботаСУслугами.ПолучитьВидУслугиНегативногоВоздействияНаЦСВ().Ссылка);
КонецПроцедуры

Функция УточнитьПараметрыПериодаОтчета()
    РезультатФункции = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), Дата(1, 1, 1));

    ПараметрПериодОтчета =
        БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(
            ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ПериодОтчета");

    РезультатФункции.НачалоПериода = НачалоДня(ПараметрПериодОтчета.Значение.ДатаНачала);
    РезультатФункции.КонецПериода = КонецДня(ПараметрПериодОтчета.Значение.ДатаОкончания);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "Период", РезультатФункции.КонецПериода);

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "НачалоПериода", РезультатФункции.НачалоПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "НачалоПериодаВключая",
        Новый Граница(РезультатФункции.НачалоПериода, ВидГраницы.Включая));

    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "КонецПериода", РезультатФункции.КонецПериода);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек.Настройки,
        "КонецПериодаВключая",
        Новый Граница(РезультатФункции.КонецПериода, ВидГраницы.Включая));

    Возврат РезультатФункции;
КонецФункции

// Функция возвращает внешние наборы данных.
// Возвращаемое значение:
//  - Структура из КлючИЗначение
//      * Ключ - Строка - Имя таблицы
//      * Значение - ТаблицаЗначений
Функция ПолучитьВнешниеНаборыДанных()
    ВнешниеНаборыДанных = Новый Структура();

    ТаблицаАдресовЗданий = ПолучитьТаблицуАдресовЗданий();
    ВнешниеНаборыДанных.Вставить("втАдресаЗданий", ТаблицаАдресовЗданий);

    Возврат ВнешниеНаборыДанных;
КонецФункции

Функция ПолучитьТаблицуАдресовЗданий()
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

    МассивВидовКонтактнойИнформации = Новый Массив;
    МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);

    МассивЗданий = Новый Массив;

    ЗапросВыборкиЗданий = Новый Запрос;
    ЗапросВыборкиЗданий.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	КВП_Здания.Ссылка
        |ИЗ
        |	Справочник.КВП_Здания КАК КВП_Здания
        |";

    ВыборкаЗданий = ЗапросВыборкиЗданий.Выполнить().Выбрать();
    Пока ВыборкаЗданий.Следующий() Цикл
        МассивЗданий.Добавить(ВыборкаЗданий.Ссылка);
    КонецЦикла;

    УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(
        Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);

    Запрос.Текст =
        "ВЫБРАТЬ
        |	втКонтактнаяИнформация.Объект КАК Здание,
        |	втКонтактнаяИнформация.Улица
        |ИЗ
        |	втКонтактнаяИнформация КАК втКонтактнаяИнформация
        |";

    РезультатФункции = Запрос.Выполнить().Выгрузить();
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// <<<- Гарант+ Килипенко
