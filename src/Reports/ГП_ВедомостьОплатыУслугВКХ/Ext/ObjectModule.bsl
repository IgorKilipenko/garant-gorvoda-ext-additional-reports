#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;

    ИнициализироватьПараметры();

    // ЭтотОбъект.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы[0].Оформление.Элементы.Найти("Текст").Значение = "На дату";
    НастроитьУсловноеОформление();

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,
            ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    МВТ = Новый МенеджерВременныхТаблиц;

    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Истина, МВТ);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьПараметры()
    СписокСчетов = Новый СписокЗначений;
    СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
    СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
    СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01"));
    СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"));
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "СписокСчетов", СписокСчетов);

    АналитикаРасчетов = Новый Массив;
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
    БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
        ЭтотОбъект.КомпоновщикНастроек, "АналитикаРасчетов", АналитикаРасчетов);

    //ДополниительныеВидыДоговора = Новый СписокЗначений;
    //ДополниительныеВидыДоговора.Добавить(ГП_РаботаСДоговорами.ПолучитьДополнительныйВидДоговораАбонентскийОтдел().Ссылка);
    //ДополниительныеВидыДоговора.Добавить(ГП_РаботаСДоговорами.ПолучитьДополнительныйВидДоговораПлатаЗаНегативноеВоздействие().Ссылка);
    //БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
    //    ЭтотОбъект.КомпоновщикНастроек, "ДополниительныеВидыДоговора", ДополниительныеВидыДоговора);
КонецПроцедуры

Функция НастроитьУсловноеОформление()
    ЗначениеПараметраПериодОтчета = ГП_РаботаСОтчетами.ПолучитьЗначениеПараметраПоНаименованию(ЭтотОбъект, "ПериодОтчета", Неопределено);
    ФорматДатыОформления = "ДФ='dd.MM.yy'";
    ШаблонЗаголовкаДолга = "Долг на %1";

    Если ЗначениеПараметраПериодОтчета <> Неопределено Тогда
        НайденныеЭлементы = НайтиЭлементыУсловногоОформленияТекста("СуммаНачальныйОстаток",
                Новый ПолеКомпоновкиДанных("ПараметрыДанных.НачалоПериода"));
        Для Каждого ТекущийЭлемент Из НайденныеЭлементы Цикл
            ТекущийЭлемент.Значение = СтрШаблон(ШаблонЗаголовкаДолга,
                    Формат(ЗначениеПараметраПериодОтчета.ДатаНачала, ФорматДатыОформления));
        КонецЦикла;

        НайденныеЭлементы = НайтиЭлементыУсловногоОформленияТекста("СуммаКонечныйОстаток",
                Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериода"));
        Для Каждого ТекущийЭлемент Из НайденныеЭлементы Цикл
            ТекущийЭлемент.Значение = СтрШаблон(ШаблонЗаголовкаДолга,
                    Формат(ЗначениеПараметраПериодОтчета.ДатаОкончания, ФорматДатыОформления));
        КонецЦикла;
    КонецЕсли;

    Возврат Истина;
КонецФункции

Функция НайтиЭлементыУсловногоОформленияТекста(Знач ПолеКомпоновкиДанных, Знач ИсходноеЗначения = Неопределено, Знач Первый = Ложь)
    РезультатФункции = Новый Массив;

    Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
        ПолеКомпоновкиДляПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
    КонецЕсли;

    Для Каждого ТекущийЭлемент Из ЭтотОбъект.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
        ОформлениеТекстаЭлемента = ТекущийЭлемент.Оформление.Элементы.Найти("Текст");
        Если ОформлениеТекстаЭлемента = Неопределено
            ИЛИ (ИсходноеЗначения <> Неопределено И ОформлениеТекстаЭлемента.Значение <> ИсходноеЗначения) Тогда
            Продолжить;
        КонецЕсли;

        Для Каждого ТекущееПолеЭлемента Из ТекущийЭлемент.Поля.Элементы Цикл
            Если ТекущееПолеЭлемента.Поле = ПолеКомпоновкиДляПоиска Тогда
                РезультатФункции.Добавить(ОформлениеТекстаЭлемента);
                Если Первый = Истина Тогда
                    Прервать;
                Иначе
                    Продолжить;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    // ЭтотОбъект.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы[0].Поля.Элементы[0].Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
    //ПараметрыДанных.НачалоПериода
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
